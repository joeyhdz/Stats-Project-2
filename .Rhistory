AIC(complex1)
summary(complex1)
simple.AIC
simple1.aic
simple2.aic
complex1 <- glm(fracture ~ priorfrac + momfrac + age + height + bmi,
data = training,
family = "binomial")
vif(complex1)
AIC(complex1)
summary(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi,
data = training,
family = "binomial")
vif(complex1)
AIC(complex1)
summary(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi + bmi:priorfrac + bmi:momfrac+ bmi:age,
data = training,
family = "binomial")
vif(complex1)
AIC(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi + bmi:priorfrac + bmi:momfrac,
data = training,
family = "binomial")
AIC(complex1)
summary(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi + bmi:priorfrac,
data = training,
family = "binomial")
AIC(complex1)
summary(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi +smoke + bmi:priorfrac,
data = training,
family = "binomial")
AIC(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi + armassist + bmi:priorfrac,
data = training,
family = "binomial")
AIC(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi + armassist + armassist:priorfrac,
data = training,
family = "binomial")
AIC(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi + armassist + armassist:priorfrac:bmi,
data = training,
family = "binomial")
AIC(complex1)
summary(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi + armassist,
data = training,
family = "binomial")
vif(complex1)
summary(complex1)
AIC(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi + armassist + smoke,
data = training,
family = "binomial")
AIC(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi + armassist + smoke + premeno,
data = training,
family = "binomial")
AIC(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi + armassist,
data = training,
family = "binomial")
AIC(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi,
data = training,
family = "binomial")
AIC(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi.cat + weight + height + bmi.cat:weight,
data = training,
family = "binomial")
vif(complex1)
AIC(complex1)
summary(complex1)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi.cat + weight + height + bmi.cat:weight + bmi.cat:height,
data = training,
family = "binomial")
AIC(complex1)
plot(simple)
#install.packages('janitor')
#install.packages('aplore3')
library(aplore3) # for our dataset
library(tidyverse) # tools for viz/cleaning/etc
library(janitor) # tools for cleaning
library(visdat) # visualize our missing data
# adding dataset into df call.
df <- glow_bonemed
# looking at our data from afar
#glimpse(df) # alot of categorical vars (factor encoding)
# for a look at a brief data description uncomment lines below:
#?glow_bonemed
#?glow500
# check for duplicated data
# get_dupes(df, sub_id) # no duplicated data here which is what we'd like to see.
# get_dupes(df, site_id) # makes sense that we would have duplicated study sites.
# get_dupes(df, phy_id) # makes sense that we would have duplicated physician id codes.
# check for missing values
#vis_miss(df) # great! No missing values.
# visualizing the summary of our data.
summary(df)
library(ggplot2)
library(gridExtra)
c <- df %>% # allows us to gather table of y/n fracture, the cnt, and percent.
group_by(fracture) %>%
summarise(cnt = n()) %>%
mutate(perc=round(cnt/sum(cnt),4))
#c # shows the result of the above
# bar plot visual of the above.
p<- ggplot(c, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture") +
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
c1 <- df %>%
group_by(fracture, premeno) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
#c1
p1<- ggplot(c1[c(2,3),], aes(x = reorder(premeno, -perc), y = perc, colour = premeno))+
geom_bar(aes(fill = premeno), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab('Menopause before age 45')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
c2 <- df %>%
group_by(fracture, momfrac) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c2
p2<- ggplot(c2[c(2,3),], aes(x = reorder(momfrac, -perc), y = perc, color = momfrac)) +
geom_bar(aes(fill = momfrac), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Mother had Hip fracture") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c3 <- df %>%
group_by(fracture, smoke) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c3
p3<- ggplot(c3[c(1,4),], aes(x = reorder(smoke, -perc), y = perc, color = smoke)) +
geom_bar(aes(fill = smoke), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Former/Current Smoker") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 1, size = 5, color = "black")
c4 <- df %>%
group_by(fracture, raterisk) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c4
p4<- ggplot(c4[c(1,2,6),], aes(x = reorder(raterisk, -perc), y = perc, color = raterisk)) +
geom_bar(aes(fill = raterisk), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Self-Risk-Score") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 4, color = "black")
c5 <- df %>%
group_by(fracture, bonemed) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c5
p5<- ggplot(c5[c(2,3),], aes(x = reorder(bonemed, -perc), y = perc, color = bonemed)) +
geom_bar(aes(fill = bonemed), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Medication at Enrollment") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c6 <- df %>%
group_by(fracture, bonemed_fu) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c6
p6<-ggplot(c6[c(2,3),], aes(x = reorder(bonemed_fu, -perc), y = perc, color = bonemed_fu)) +
geom_bar(aes(fill = bonemed_fu), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Medication at Follow-up") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c7 <- df %>%
group_by(fracture, bonetreat) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c7
p7<-ggplot(c7[c(2,3),], aes(x = reorder(bonetreat, -perc), y = perc, color = bonetreat)) +
geom_bar(aes(fill = bonetreat), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Treatment: Enrollment & Follow-up") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c8 <- df %>%
group_by(fracture, armassist) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
#c8
p8<- ggplot(c8[c(2,3),], aes(x = reorder(armassist, -perc), y = perc, colour = armassist))+
geom_bar(aes(fill = armassist), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab('Assistance to Stand')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
c9 <- df %>%
group_by(fracture, priorfrac) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c9
p9<-ggplot(c9[c(2,3),], aes(x = reorder(priorfrac, -perc), y = perc, color = priorfrac)) +
geom_bar(aes(fill = priorfrac), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Prior Fracture") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
# transforming numeric into categorical using widley accepted BMI categories
df$bmi.cat <- ifelse(df$bmi < 18.5, "Underweight",
ifelse(df$bmi < 25, "Healthy weight",
ifelse(df$bmi < 30, "Overweight", "Obesity")))
c10 <- df %>%
group_by(fracture, bmi.cat) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
#c10
p10<- ggplot(c10[c(2,3,5,8),], aes(x = reorder(bmi.cat, -perc), y = perc, colour = bmi.cat))+
geom_bar(aes(fill = bmi.cat), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab('BMI Categories')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 1, size = 4, color = 'black')
grid.arrange(p,p1,p2,p3,p4,
heights = c(1,1))
grid.arrange(p5,p6,p7,p8,p9,p10,
heights= c(1,1),
widths = c(1,1,1.6))
grid.arrange(p,p1,p2,p3,p4,
heights = c(1,1))
grid.arrange(p5,p7,p10,
heights = c(1,1),
widths = c(1,1,1.6))
# numercial form of fracture
df$fracture.num <- ifelse(df$fracture == "Yes",1,0) # Yes = 1 | No = 0
lp <- df %>% ggplot(aes(x = phy_id, y = fracture.num)) +
geom_point() + ggtitle("LOESS: Phy_ID")+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)
lp1<- df %>% ggplot(aes(x = site_id, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Site_id")
lp2<- df %>% ggplot(aes(x = weight, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Weight")
lp3<- df %>% ggplot(aes(x = age, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Age")
lp4<- df %>% ggplot(aes(x = height, y = fracture.num)) +
geom_point()+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Height")
lp5<- df %>% ggplot(aes(x = fracscore, y = fracture.num)) +
geom_point()+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: fracscore")
lp6 <- df %>% ggplot(aes(x = bmi, fracture.num)) +
geom_point()+
geom_smooth(method = 'loess', size = 1) + ylim(-.2,1.2) + ggtitle("Loess: BMI")
grid.arrange(lp,lp1,lp2,lp3,lp4,lp5,lp6,
heights = c(1,1))
library(caret)
set.seed(12)
trainIndex <- createDataPartition(df$fracture, p= .8, list = F) # p = proportion of data in train
training <- df[trainIndex,]
test <- df[-trainIndex,]
# sanity check
#nrow(training)
#nrow(test)
library(ResourceSelection)
library(car)
# fitting an additive multiple logistic regression model
simple <- glm(fracture ~ fracscore + smoke + armassist + momfrac + premeno + bmi.cat + height + age + bonemed + bonetreat, data = training, family ="binomial")
# looking at coefficients
simple.summary<- summary(simple)
# looking for Multicollinearity
simple.vif <- vif(simple)
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
simple.AIC <- AIC(simple)
# Hosmer-Lemeshow test
simple.hlt <- hoslem.test(simple$y, fitted(simple))
# coefficient output for log. reg. model:
simple.coef<- coef(simple) # normal coefficient output
simple.exp<- exp(coef(simple)) # exp coefficient
# confidence intervals
simple.ci<- exp(confint(simple, level = .95)) # confidence interval @ .05 significance
# fitting an additive multiple logistic regression model
simple1 <- glm(fracture ~ smoke + armassist + momfrac + premeno + bmi.cat + height + age + bonemed + bonetreat, data = training, family ="binomial")
# looking at coefficients
simple1.summary<-summary(simple1)
# looking for Multicollinearity
simple1.vif <- vif(simple1)
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
simple1.aic <- AIC(simple1)
# Hosmer-Lemeshow test
simple1.hlt <- hoslem.test(simple1$y, fitted(simple1))
# coefficient output for log. reg. model:
simple1.coef <- coef(simple1) # normal coefficient output
simple1.exp <- exp(coef(simple1)) # exp coefficient
# confidence intervals
simple1.ci <- exp(confint(simple1, level = .95)) # confidence interval @ .05 significance
red.model <- glm(fracture~fracscore + bmi.cat + bonemed,
data = training,
family ="binomial")
red.model.summary <- summary(red.model)
library(sjPlot)
library(sjmisc)
library(effects)
# effect plot
plot_model(simple, type = "pred", terms = "fracscore")
plot_model(simple, type = "pred", terms = "bonemed")
plot_model(simple, type = "pred", terms = "bmi.cat")
# identifies all of the high-order terms in a model and returns a list of "eff" or "effpoly" objects.
all.effects <- allEffects(simple)
# plots the effect plosts
plot(all.effects,multiline=T)
# effect plot
plot_model(simple, type = "pred", terms = c("age","bonemed"))
plot_model(simple, type = "pred", terms = c("age","bonetreat"))
# effect plot
plot_model(simple,type="pred",terms = c("smoke","momfrac"))
# effect plot
plot_model(simple, type = "pred", terms = c("armassist","age[55,60,65,70,75,80,85,90]"))
library(pROC)
# predicting probabilities on the testing data
simple.predprobs <- predict(simple,test, type = 'response')
#simple.predprobs
simple.roc <- roc(response = test$fracture,
predictor = simple.predprobs,
levels = c("No","Yes"))
plot(simple.roc, print.thres= "best", col = "red", legend = T)
# predicting probabilities on the testing data
simple1.predprobs <- predict(simple1,test, type = 'response')
#simple.predprobs
simple1.roc <- roc(response = test$fracture,
predictor = simple1.predprobs,
levels = c("No","Yes"))
plot(simple1.roc, print.thres= "best", col = "red", legend = T)
simple2 <- glm(fracture~priorfrac + premeno + momfrac + smoke + age,data = training,family = "binomial")
# looking at coefficients
simple2.summary<-summary(simple2)
# looking for Multicollinearity
simple2.vif <- vif(simple2)
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
simple2.aic <- AIC(simple2)
# Hosmer-Lemeshow test
simple2.hlt <- hoslem.test(simple1$y, fitted(simple2))
# predicting probabilities on the testing data
simple2.predprobs <- predict(simple2,test, type = 'response')
#simple.predprobs
simple2.roc <- roc(response = test$fracture,
predictor = simple2.predprobs,
levels = c("No","Yes"))
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
add.model <- train(fracture ~ fracscore+age+height+momfrac+smoke,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(add.model)
# make preds on the probabilty of each class in TRANING data
add.model.predprob <- predict(add.model,test, type = "prob")
# compute the ROC curve
add.model.roc <- roc(response = test$fracture, predictor = add.model.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(add.model.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'caret model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
# get coord (threshold)
coords <- coords(add.model.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.2472446
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(add.model.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
confusionMatrix(pred_label, test$fracture)
# age | bmi.cat - potential interaction ?
df %>% ggplot(aes(x = age, y = fracture.num, color = bmi.cat)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bmi.cat)
# height | bmi.cat - potential interaction ?
df %>% ggplot(aes(x = height, y = fracture.num, color = bmi.cat)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bmi.cat)
# bmi | fracscore - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = armassist)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~armassist)
# bmi | fracscore - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = fracscore)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~fracscore)
# bmi | priorfrac - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = priorfrac )) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~priorfrac)
# height | raterisk - potential interaction ?
df %>% ggplot(aes(x = height, y = fracture.num, color = raterisk)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~raterisk)
complex1 <- glm(fracture ~ priorfrac + momfrac + age + bmi.cat + weight + height + bmi.cat:weight + bmi.cat:height,
data = training,
family = "binomial")
vif(complex1)
AIC(complex1)
summary(complex1)
colnames(df)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex <- train(fracture ~ fracscore*age + age + height +
momfrac + smoke,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
complex1 <- glm(fracture ~ bonemed + bonemed_fu + bonetreat + bmi.cat,
data = training,
family = "binomial")
AIC(complex1)
summary(complex1)
complex1 <- glm(fracture ~ bonemed + bonemed_fu + bonetreat + bmi,
data = training,
family = "binomial")
vif(complex1)
AIC(complex1)
summary(complex1)
vif(complex1)
?glow_bonemed
complex1 <- glm(fracture ~ bonemed + bonemed_fu + bmi,
data = training,
family = "binomial")
vif(complex1)
AIC(complex1)
complex1 <- glm(fracture ~ bonemed + bonemed_fu + bmi.cat,
data = training,
family = "binomial")
AIC(complex1)
# height | raterisk - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bonemed)
# height | raterisk - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed_fu)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bonemed_fu)
# height | raterisk - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonetreat)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bonetreat)
# height | raterisk - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed_fu)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bonemed_fu)
# height | raterisk - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bonemed)
complex1 <- glm(fracture ~ bonemed + bonetreat + bonemed_fu + bmi + bmi:bonemed + bmi:bonetreat + bmi:bonemed_fu,
data = training,
family = "binomial")
AIC(complex1)
summary(complex1)
cat(simple1.aic, AIC(complex1))
cat("simple1:"simple1.aic, AIC(complex1))
cat("simple1:",simple1.aic, AIC(complex1))
cat("simple1:",simple1.aic,"\n complex1:" AIC(complex1))
cat("simple1:",simple1.aic,"\n complex1:", AIC(complex1))
cat("simple1:",simple1.aic,"\ncomplex1:", AIC(complex1))
cat("Simple1:",simple1.aic,"\nComplex1:", AIC(complex1))
cat("Simple1:",simple1.aic,
"\nComplex1:", AIC(complex1),
"\nSimple2:",simple2.aic)
cat("Simple:", simple.AIC,
"Simple1:",simple1.aic,
"\nComplex1:", AIC(complex1),
"\nSimple2:",simple2.aic)
cat("Simple:", simple.AIC,
"\naSimple1:",simple1.aic,
"\nComplex1:", AIC(complex1),
"\nSimple2:",simple2.aic)
cat("Simple:", simple.AIC,
"\nSimple1:",simple1.aic,
"\nComplex1:", AIC(complex1),
"\nSimple2:",simple2.aic)
