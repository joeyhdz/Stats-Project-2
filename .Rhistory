summarize(df)
library(tidyverse)
df<- glow_bonemed
#install.packages('aplore3')
library(aplore3)
df<- glow_bonemed
head(df)
summarize(df)
summarise(df)
summary(df)
library(janitor)
head(df)
glimpse(df)
get_dupes(df)
glimpse(df) # looking at our data from afar.
get_dupes(df, sub_id) # check for duplicated data
glimpse(df) # looking at our data from afar.
get_dupes(df, site_id) # check for duplicated data
glimpse(df) # looking at our data from afar.
get_dupes(df, phy_id )
glimpse(df) # looking at our data from afar.
# check for duplicated data
get_dupes(df, sub_id)
# check for missing values
vis_miss(df)
library(visdat) # visualize our missing data
# check for missing values
vis_miss(df)
#install.packages('janitor')
#install.packages('aplore3')
library(aplore3) # for our dataset
library(tidyverse) # tools for viz/cleaning/etc
library(janitor) # tools for cleaning
library(visdat) # visualize our missing data
df<- glow_bonemed # adding dataset into df call.
glimpse(df) # looking at our data from afar.
# for a look at a brief data description uncomment lines below:
# ?glow_bonemed
# ?glow500
# check for duplicated data
get_dupes(df, sub_id) # no duplicated data here which is what we'd like to see.
get_dupes(df, site_id) # makes sense that we would have duplicated study sites.
get_dupes(df, phy_id) # makes sense that we would have duplicated physician id codes.
# check for missing values
vis_miss(df) # great! no missing values.
table(df$Failure)
library(Sleuth3)
df <- ex2011
table(df$Failure)
#install.packages('janitor')
#install.packages('aplore3')
library(aplore3) # for our dataset
library(tidyverse) # tools for viz/cleaning/etc
library(janitor) # tools for cleaning
library(visdat) # visualize our missing data
# adding dataset into df call.
df<- glow_bonemed
# looking at our data from afar
glimpse(df) # alot of categorical vars (factor encoding)
# for a look at a brief data description uncomment lines below:
#?glow_bonemed
#?glow500
# check for duplicated data
get_dupes(df, sub_id) # no duplicated data here which is what we'd like to see.
get_dupes(df, site_id) # makes sense that we would have duplicated study sites.
get_dupes(df, phy_id) # makes sense that we would have duplicated physician id codes.
# check for missing values
vis_miss(df) # great! No missing values.
# adding dataset into df call.
df<- glow_bonemed
# looking at our data from afar
glimpse(df) # alot of categorical vars (factor encoding)
# for a look at a brief data description uncomment lines below:
#?glow_bonemed
#?glow500
# check for duplicated data
get_dupes(df, sub_id) # no duplicated data here which is what we'd like to see.
get_dupes(df, site_id) # makes sense that we would have duplicated study sites.
get_dupes(df, phy_id) # makes sense that we would have duplicated physician id codes.
# check for missing values
vis_miss(df) # great! No missing values.
# adding dataset into df call.
df<- glow_bonemed
# looking at our data from afar
glimpse(df) # alot of categorical vars (factor encoding)
# for a look at a brief data description uncomment lines below:
#?glow_bonemed
#?glow500
# check for duplicated data
get_dupes(df, sub_id) # no duplicated data here which is what we'd like to see.
get_dupes(df, site_id) # makes sense that we would have duplicated study sites.
get_dupes(df, phy_id) # makes sense that we would have duplicated physician id codes.
# check for missing values
vis_miss(df) # great! No missing values.
#install.packages('janitor')
#install.packages('aplore3')
library(aplore3) # for our dataset
library(tidyverse) # tools for viz/cleaning/etc
library(janitor) # tools for cleaning
library(visdat) # visualize our missing data
# adding dataset into df call.
df<- glow_bonemed
# looking at our data from afar
glimpse(df) # alot of categorical vars (factor encoding)
# for a look at a brief data description uncomment lines below:
#?glow_bonemed
#?glow500
# check for duplicated data
get_dupes(df, sub_id) # no duplicated data here which is what we'd like to see.
get_dupes(df, site_id) # makes sense that we would have duplicated study sites.
get_dupes(df, phy_id) # makes sense that we would have duplicated physician id codes.
# check for missing values
vis_miss(df) # great! No missing values.
library(GGally)
ggpairs(df)
#install.packages('janitor')
#install.packages('aplore3')
library(aplore3) # for our dataset
library(tidyverse) # tools for viz/cleaning/etc
library(janitor) # tools for cleaning
library(visdat) # visualize our missing data
# adding dataset into df call.
df<- glow_bonemed
# looking at our data from afar
glimpse(df) # alot of categorical vars (factor encoding)
# for a look at a brief data description uncomment lines below:
#?glow_bonemed
#?glow500
# check for duplicated data
get_dupes(df, sub_id) # no duplicated data here which is what we'd like to see.
get_dupes(df, site_id) # makes sense that we would have duplicated study sites.
get_dupes(df, phy_id) # makes sense that we would have duplicated physician id codes.
# check for missing values
vis_miss(df) # great! No missing values.
library(GGally)
glimpse(df)
g <- df %>%
group_by(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))
g
g <- df %>%
group_by(fracture) %>%
mutate(perc=round(cnt/sum(cnt),4))
g <- df %>%
group_by(fracture) %>%
mutate(perc=round(cnt/sum(cnt),4))
g <- df %>%
group_by(fracture) %>%
summarise(cnt = n()) %>%
mutate(perc=round(cnt/sum(cnt),4))
g
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = T, stat = 'identity') +
ylab('Proportion of Fracture')
library(ggplot2)
g
# bar plot visual of the above.
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = T, stat = 'identity') +
ylab('Proportion of Fracture')
# bar plot visual of the above.
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture')
# bar plot visual of the above.
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture")
# bar plot visual of the above.
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture") + geom_text(aes(label = perc), vjust = -.5, size = 5)
# bar plot visual of the above.
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture") + geom_text(aes(label = perc), vjust = 2, size = 5)
# bar plot visual of the above.
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture") +
geom_text(aes(label = perc), vjust = 2, size = 5, color = 'black')
# bar plot visual of the above.
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture") +
geom_text(aes(label = perc * 100), vjust = 2, size = 5, color = 'black')
geom_text(aes(label = cat(perc * 100,"%\n"), vjust = 2, size = 5, color = 'black')
geom_text(aes(label = cat(perc * 100,"%\\"), vjust = 2, size = 5, color = 'black')
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
geom_text(aes(label = paste0(perc *100, "%" ), vjust = 2, size = 5, color = 'black')
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
# bar plot visual of the above.
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture") +
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
# bar plot visual of the above.
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture") +
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
glimpse(df)
g2 <- df %>%
group_by(fracture, premeno) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g2
g2 <- df %>%
group_by(fracture, premeno) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g2
ggplot(g2[c(2,3),], aes(x = reorder(premeno, -perc), y = perc, colour = premeno))+
geom_bar(aes(fill = premeno), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('Menopause before age 45')
g3 <- df %>%
group_by(fracture, smoke) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g3
ggplot(g3[c(2,3),], aes(x = reorder(smoke, -perc), y = perc, colour = smoke))+
geom_bar(aes(fill = smoke), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('Former or Current Smoker')
g3 <- df %>%
group_by(fracture, armassist) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g3
ggplot(g3[c(2,3),], aes(x = reorder(armassist, -perc), y = perc, colour = armassist))+
geom_bar(aes(fill = smoke), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('Former or Current Smoker')
g3 <- df %>%
group_by(fracture, armassist) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g3
ggplot(g3[c(2,3),], aes(x = reorder(armassist, -perc), y = perc, colour = armassist))+
geom_bar(aes(fill = armassist), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('Arm needed to stand from chair')
view(df)
df$bmi.cat <- ifelse(df$bmi < 18.5, "Underweight",
ifelse(df$bmi < 25, "Healthy weight",
ifelse(df$bmi < 30, "Overweight", "Obesity")))
# transforming numeric into categorical using widley accepted BMI categories
df$bmi.cat <- ifelse(df$bmi < 18.5, "Underweight",
ifelse(df$bmi < 25, "Healthy weight",
ifelse(df$bmi < 30, "Overweight", "Obesity")))
g4 <- df %>%
group_by(fracture, bmi.cat) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g4
ggplot(g4[c(2,3),], aes(x = reorder(bmi.cat, -perc), y = perc, colour = bmi.cat))+
geom_bar(aes(fill = bmi.cat), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('BMI Categories')
view(df)
library(ggplot2)
g <- df %>% # allows us to gather table of y/n fracture, the cnt, and percent.
group_by(fracture) %>%
summarise(cnt = n()) %>%
mutate(perc=round(cnt/sum(cnt),4))
g # shows the result of the above
# bar plot visual of the above.
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture") +
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
g2 <- df %>%
group_by(fracture, premeno) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g2
ggplot(g2[c(2,3),], aes(x = reorder(premeno, -perc), y = perc, colour = premeno))+
geom_bar(aes(fill = premeno), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('Menopause before age 45')
g3 <- df %>%
group_by(fracture, armassist) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g3
ggplot(g3[c(2,3),], aes(x = reorder(armassist, -perc), y = perc, colour = armassist))+
geom_bar(aes(fill = armassist), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('Arm needed to stand from chair')
ggplot(g4[c(2,3,5,8),], aes(x = reorder(bmi.cat, -perc), y = perc, colour = bmi.cat))+
geom_bar(aes(fill = bmi.cat), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('BMI Categories')
# transforming numeric into categorical using widley accepted BMI categories
df$bmi.cat <- ifelse(df$bmi < 18.5, "Underweight",
ifelse(df$bmi < 25, "Healthy weight",
ifelse(df$bmi < 30, "Overweight", "Obesity")))
g4 <- df %>%
group_by(fracture, bmi.cat) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g4
ggplot(g4[c(2,3,5,8),], aes(x = reorder(bmi.cat, -perc), y = perc, colour = bmi.cat))+
geom_bar(aes(fill = bmi.cat), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('BMI Categories')
#install.packages('janitor')
#install.packages('aplore3')
library(aplore3) # for our dataset
library(tidyverse) # tools for viz/cleaning/etc
library(janitor) # tools for cleaning
library(visdat) # visualize our missing data
# adding dataset into df call.
df<- glow_bonemed
# looking at our data from afar
glimpse(df) # alot of categorical vars (factor encoding)
# for a look at a brief data description uncomment lines below:
#?glow_bonemed
#?glow500
# check for duplicated data
get_dupes(df, sub_id) # no duplicated data here which is what we'd like to see.
get_dupes(df, site_id) # makes sense that we would have duplicated study sites.
get_dupes(df, phy_id) # makes sense that we would have duplicated physician id codes.
# check for missing values
vis_miss(df) # great! No missing values.
library(ggplot2)
g <- df %>% # allows us to gather table of y/n fracture, the cnt, and percent.
group_by(fracture) %>%
summarise(cnt = n()) %>%
mutate(perc=round(cnt/sum(cnt),4))
g # shows the result of the above
# bar plot visual of the above.
ggplot(g, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture") +
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
g2 <- df %>%
group_by(fracture, premeno) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g2
ggplot(g2[c(2,3),], aes(x = reorder(premeno, -perc), y = perc, colour = premeno))+
geom_bar(aes(fill = premeno), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('Menopause before age 45')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
g3 <- df %>%
group_by(fracture, armassist) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g3
ggplot(g3[c(2,3),], aes(x = reorder(armassist, -perc), y = perc, colour = armassist))+
geom_bar(aes(fill = armassist), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('Arm needed to stand from chair')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
# transforming numeric into categorical using widley accepted BMI categories
df$bmi.cat <- ifelse(df$bmi < 18.5, "Underweight",
ifelse(df$bmi < 25, "Healthy weight",
ifelse(df$bmi < 30, "Overweight", "Obesity")))
g4 <- df %>%
group_by(fracture, bmi.cat) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g4
ggplot(g4[c(2,3,5,8),], aes(x = reorder(bmi.cat, -perc), y = perc, colour = bmi.cat))+
geom_bar(aes(fill = bmi.cat), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('BMI Categories')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
g2 <- df %>%
group_by(fracture, premeno) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
g2
ggplot(g2[c(2,3),], aes(x = reorder(premeno, -perc), y = perc, colour = premeno))+
geom_bar(aes(fill = premeno), show.legend = T, stat = 'identity') +
ylab('Proportion of Disease') +
xlab('Menopause before age 45')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
# for a look at a brief data description uncomment lines below:
?glow_bonemed
?glow500
summary(df)
df$fracture
df %>% ggplot(aes(x = weight, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1)
df$fracture.num <- ifelse(df$fracture == "Yes",1,0) # Yes = 1 | No = 0
df %>% ggplot(aes(x = weight, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1)
df %>% ggplot(aes(x = weight, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)
df %>% ggplot(aes(x = age, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)
df %>% ggplot(aes(x = age, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)
df %>% ggplot(aes(x = age, y = fracture.num)) +
geom_point()+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)
df %>% ggplot(aes(x = height, y = fracture.num)) +
geom_point()+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)
df %>% ggplot(aes(x = fracscore, y = fracture.num)) +
geom_point()+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)
