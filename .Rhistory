training <- df[trainIndex,]
test <- df[-trainIndex,]
# sanity check
#nrow(training)
#nrow(test)
library(ResourceSelection)
library(car)
# removing sub_id, raterisk, fracture.num
adj.training <- training[,-c(1,20)]
#colnames(adj.training) #sanity check
base.model <- glm(fracture~., family = "binomial", data = adj.training)
summary(base.model)
# anova
anova(base.model, test = "Chisq")
base.adj <- glm(fracture~priorfrac+age+bmi+raterisk+bonetreat, data = training, family = "binomial")
summary(base.adj)
# anova comparing both models
anova(base.model,base.adj,test = "Chisq")
# checking for multicollinearity issues.
#vif(base.adj) #no issues present
# fitting an additive multiple logistic regression model
simple <- glm(fracture ~ smoke + armassist + momfrac + premeno + bmi + height + age + bonemed + bonetreat + bonemed_fu, data = training, family ="binomial")
# looking at coefficients
(simple.summary<- summary(simple))
# looking for Multicollinearity
#(simple.vif <- vif(simple))
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
simple.AIC <- AIC(simple)
# ANOVA
anova(simple, test = "Chisq")
red.model <- glm(fracture~ armassist+age+bonemed_fu+bonemed,
data = training,
family ="binomial")
# summary of coef.
summary(red.model)
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
red.aic <- AIC(red.model)
# looking for Multicollinearity
red.vif <- vif(red.model) # we do have a high VIF in bonetreat.
# Hosmer-Lemeshow test
red.hlt <- hoslem.test(red.model$y, fitted(red.model))
# ANOVA Comparison
anova(simple, red.model, test = "Chisq") # FTR null : proceed with red.model
# ANOVA BASE.ADJ/RED
anova(base.adj,red.model,test = "Chisq") # FTR Null: proceed with red.model
library(sjPlot)
library(sjmisc)
library(effects)
# effect plot
plot_model(red.model, type = "pred", terms = "armassist")
plot_model(red.model, type = "pred", terms= "bonemed_fu")
plot_model(red.model, type = "pred", terms = "bonemed")
plot_model(red.model, type = "pred",terms = "age")
# identifies all of the high-order terms in a model and returns a list of "eff" or "effpoly" objects.
all.effects <- allEffects(red.model)
# plots the effect plosts
plot(all.effects,multiline=T)
# effect plot
plot_model(red.model, type = "pred", terms = c("bonemed","armassist"))
plot_model(red.model, type ="pred", terms = c("age","bonemed_fu"))
plot_model(red.model, type = "pred", terms = c("age","armassist"))
plot_model(red.model, type = "pred", terms = c("armassist","bonemed_fu"))
library(pROC)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
base.adjust.cv <- train(fracture~age+priorfrac+height+momfrac+bonemed+bmi+bonemed_fu,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(base.adjust.cv)
base.aic <- AIC(base.adj) # 384.7314
# make preds on the probabilty of each class in TRANING data
add.model.predprob <- predict(base.adjust.cv,test, type = "prob")
# compute the ROC curve
add.model.roc <- roc(response = test$fracture, predictor = add.model.predprob$Yes, levels = c("Yes","No"))
# optimal threshold
optimal.threshold <- coords(add.model.roc, "best")
# plot ROC curve
plot(add.model.roc, print.thres = "best",
#print.thres.best.method = "closest.topleft",
col = "red")
# add legend to plot
legend("bottomright",
legend = 'Additive model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
text(x = optimal.threshold[1], y = optimal.threshold[2],
labels = paste("Optimal Threshold =", round(optimal.threshold[1], 2)),
pos = 3)
# get coord (threshold)
coords <- coords(add.model.roc, "best",
#best.method = "closest.topleft",
ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.3003923
# make changes to threshold if desired
adj.threshold <- threshold + 0 # low incr. ses.
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(add.model.predprob$Yes > adj.threshold, "Yes","No"))
# print confusion matrix
(cm1 <- confusionMatrix(pred_label, test$fracture, positive = "Yes"))
cat("\nSensitivity:", cm1$byClass[1],
"\nSpecificity:", cm1$byClass[2],
"\nPrevalence:", cm1$byClass[8],
"\nPositive Predicitve Value:", cm1$byClass[3],
"\nNegative Predicive Value:",cm1$byClass[4],
"\nAUROC:", add.model.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
add.model <- train(fracture~ armassist+age+bonemed_fu+bonemed,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(add.model)
red.aic <- AIC(red.model) # 385.2419
# make preds on the probabilty of each class in TRANING data
add.model.predprob <- predict(add.model,test, type = "prob")
# compute the ROC curve
add.model.roc <- roc(response = test$fracture, predictor = add.model.predprob$Yes, levels = c("Yes","No"))
# optimal threshold
optimal.threshold <- coords(add.model.roc, "best")
# plot ROC curve
#plot(add.model.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
# legend("bottomright",
#        legend = 'caret model',
#        col = "red",
#        lwd = 4, cex = 1, xpd = T, horiz = F)
# text(x = optimal.threshold[1], y = optimal.threshold[2],
#      labels = paste("Optimal Threshold =", round(optimal.threshold[1], 2)),
#      pos = 1)
# get coord (threshold)
coords <- coords(add.model.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.2358135
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(add.model.predprob$Yes > adj.threshold, "Yes","No"))
# print confusion matrix
#(cm2 <- confusionMatrix(pred_label, test$fracture, positive = "Yes"))
# cat("\nSensitivity:", cm2$byClass[1],
#     "\nSpecificity:", cm2$byClass[2],
#     "\nPrevalence:", cm2$byClass[8],
#     "\nPositive Predicitve Value:", cm2$byClass[3],
#     "\nNegative Predicive Value:",cm2$byClass[4],
#     "\nAUROC:", add.model.roc$auc)
# age | bmi.cat
df %>% ggplot(aes(x = age, y = fracture.num, color = bmi.cat)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bmi.cat)
# height | bmi.cat
df %>% ggplot(aes(x = height, y = fracture.num, color = bmi.cat)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bmi.cat)
# bmi | fracscore
df %>% ggplot(aes(x = bmi, y = fracture.num, color = armassist)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~armassist)
# bmi | fracscore
df %>% ggplot(aes(x = bmi, y = fracture.num, color = fracscore)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~fracscore)
# height | raterisk
df %>% ggplot(aes(x = height, y = fracture.num, color = raterisk)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~raterisk)
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = T) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Body Mass Index")
df %>% ggplot(aes(x = age, y = fracture.num, color = as.factor(fracscore))) +
geom_smooth(method = "loess", size = 1, span= .75) +
ylim(-.2,1.2) + facet_wrap(~as.factor(fracscore))
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, show.legend = T, span = 1) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Height in CM")
# bmi | priorfrac
df %>% ggplot(aes(x = bmi, y = fracture.num, color = priorfrac )) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = T) +
ylim(-.2, 1.2) + facet_wrap(~priorfrac)+ ylab("Fracture") + xlab("Body Mass Index")
complex <- glm(fracture~age+priorfrac+height+momfrac+bonemed+bmi+bonemed_fu+
height:bonemed_fu+bonemed:bmi,
data = training,
family = "binomial")
complex.aic <- AIC(complex)
summary(complex)
# printing out all AIC metrics (note they are based on training data not test data)
# cat("\nbase.adj Model (Additive):", base.aic,
#     "\nRed Model (Additive):", red.aic,
#     "\nComplex Model:", complex.aic)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex.cv <- train(fracture~age+priorfrac+height+momfrac+bonemed+bmi+bonemed_fu+height:bonemed_fu+bonemed:bmi,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex.cv)
# make preds on the probabilty of each class in TRANING data
complexcv.predprob <- predict(complex.cv, test, type = "prob")
# compute the ROC curve
complexcv.roc <- roc(response = test$fracture, predictor = complexcv.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complexcv.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'caret model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
(cm3 <-confusionMatrix(pred_label, test$fracture, positive = "Yes"))
cat("\nSensitivity:", cm3$byClass[1],
"\nSpecificity:", cm3$byClass[2],
"\nPrevalence:", cm3$byClass[8],
"\nPositive Predicitve Value:", cm3$byClass[3],
"\nNegative Predicive Value:",cm3$byClass[4],
"\nAUROC:", complexcv.roc$auc)
colnames(training)
glm.df <- training[,-c(1:3,8,20)]
set.seed(12)
fitControl<- trainControl(method = "repeatedcv", number = 5, repeats = 1)
glm.fit <- train(fracture~.,
data = glm.df,
method = "glmnet",
trControl = fitControl)
glm.fit
plot(glm.fit)
opt.pen<- glm.fit$finalModel$lambdaOpt
coef(glm.fit$finalModel, opt.pen)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
red.glm <- train(fracture~priorfrac+momfrac+raterisk+fracscore+bonemed_fu+bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(red.glm)
# make preds on the probabilty of each class in TRANING data
glm.predprob <- predict(red.glm, test, type = "prob")
# compute the ROC curve
glm.roc <- roc(response = test$fracture, predictor = glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'caret model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
# fitting model for AIC below
red.glm <- glm(fracture~priorfrac+momfrac+raterisk+fracscore+bonemed_fu+bmi.cat,
data = training,family = "binomial")
red.glm.aic<-AIC(red.glm)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic,
"\nRed.GLM Model(additive):", red.glm.aic)
# get coord (threshold)
coords <- coords(glm.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(glm.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
(cm4 <- confusionMatrix(pred_label, test$fracture, positive = "Yes"))
cat("\nSensitivity:", cm4$byClass[1],
"\nSpecificity:", cm4$byClass[2],
"\nPrevalence:", cm4$byClass[8],
"\nPositive Predicitve Value:", cm4$byClass[3],
"\nNegative Predicive Value:",cm4$byClass[4],
"\nAUROC:", glm.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex.glm <- train(fracture ~ site_id + priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex.glm)
# make preds on the probabilty of each class in TRANING data
complex.glm.predprob <- predict(complex.glm, test, type = "prob")
# compute the ROC curve
complex.glm.roc <- roc(response = test$fracture, predictor = complex.glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complex.glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'GLM Complex',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
complex.glm <- glm(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,family = "binomial")
# AIC
complex.glm.aic<-AIC(complex.glm)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic,
"\nRed.GLM Model(additive):", red.glm.aic,
"\nComplex.GLM:",complex.glm.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
(cm5 <- confusionMatrix(pred_label, test$fracture, positive = "Yes"))
cat("\nSensitivity:", cm5$byClass[1],
"\nSpecificity:", cm5$byClass[2],
"\nPrevalence:", cm5$byClass[8],
"\nPositive Predicitve Value:", cm5$byClass[3],
"\nNegative Predicive Value:",cm5$byClass[4],
"\nAUROC:", complex.glm.roc$auc)
knn.df <- training[,-c(1)]
fitControl <- trainControl(method = "repeatedcv",number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
set.seed(12)
knn.model <- train(fracture~ .,
method = "knn",
data = knn.df,
trControl = fitControl,
metric = "logLoss")
preds <- predict(knn.model, test, type ="prob")[,"Yes"]
knn.roc <- roc(response = test$fracture, predictor = preds, levels = c("Yes","No"))
plot(knn.roc,print.thres = "best", print.thres.best.method = "closest.topleft", col = "purple")
plot(complexcv.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "lightblue")
plot(glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "black", add = T)
plot(complex.glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red", add = T)
plot(knn.roc,print.thres = "best", print.thres.best.method = "closest.topleft", col = "purple", add = T)
# add legend to plot
legend("bottomright",
legend = c("Complex","GLM Additive",'GLM Complex', "KNN"),
col = c("lightblue","black","red","purple"),
lwd = 4, cex = 1, xpd = T, horiz = F)
# coords(complexcv.roc, "best", ret = c("threshold", "specificity", "sens"), transpose = F)
# coords(glm.roc, "best", ret = c("threshold","specificity","sens"), transpose = F)
# coords(complex.glm.roc, "best", ret = c("threshold","specificity","sens"), transpose=F)
threshold = .5
knn.preds <- factor(ifelse(preds > threshold, "Yes","No"))
(cm6 <- confusionMatrix(data = knn.preds, reference = as.factor(test$fracture), positive = "Yes"))
cat("\nSensitivity:", cm6$byClass[1],
"\nSpecificity:", cm6$byClass[2],
"\nPrevalence:", cm6$byClass[8],
"\nPositive Predicitve Value:", cm6$byClass[3],
"\nNegative Predicive Value:",cm6$byClass[4],
"\nAUROC:", knn.roc$auc)
set.seed(12)
fitControl<- trainControl(method = "repeatedcv", number = 5, repeats = 1)
lambda_values <- seq(0,.03,by = .001)
lasso.fit <- train(fracture ~ .,
data = adj.training,
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(data.frame(alpha = 1, lambda = lambda_values)))
lasso.fit
plot(lasso.fit)
opt.pen<- lasso.fit$finalModel$lambdaOpt
coef(lasso.fit$finalModel, opt.pen)
lasso.model <- glm(fracture ~ priorfrac+ raterisk + bonemed_fu + fracscore + bmi.cat,
data = training,
family = "binomial")
summary(lasso.model)
# checking for multicollinearity issues.
vif(lasso.model) #no issues present
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
lasso.model.cv <- train(fracture ~ priorfrac+ raterisk + bonemed_fu + momfrac + fracscore + bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
#summary(base.adjust.cv)
base.aic <- AIC(lasso.model) # 381.87
# make preds on the probabilty of each class in TRANING data
add.model.predprob <- predict(lasso.model.cv,test, type = "prob")
# compute the ROC curve
add.model.roc <- roc(response = test$fracture, predictor = add.model.predprob$Yes, levels = c("Yes","No"))
# optimal threshold
optimal.threshold <- coords(add.model.roc, "best")
# plot ROC curve
plot(add.model.roc, print.thres = "best",
#print.thres.best.method = "closest.topleft",
col = "red")
# add legend to plot
legend("bottomright",
legend = 'Additive model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
text(x = optimal.threshold[1], y = optimal.threshold[2],
labels = paste("Optimal Threshold =", round(optimal.threshold[1], 2)),
pos = 3)
# get coord (threshold)
coords <- coords(add.model.roc, "best",
#best.method = "closest.topleft",
ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.3003923
# make changes to threshold if desired
adj.threshold <- threshold + .4 # lower increases sensitivity
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(add.model.predprob$Yes > adj.threshold, "Yes","No"))
# print confusion matrix
(cm1 <- confusionMatrix(pred_label, test$fracture, positive = "Yes"))
cat("\nSensitivity:", cm1$byClass[1],
"\nSpecificity:", cm1$byClass[2],
"\nPrevalence:", cm1$byClass[8],
"\nPositive Predicitve Value:", cm1$byClass[3],
"\nNegative Predicive Value:",cm1$byClass[4],
"\nAUROC:", add.model.roc$auc)
ggpairs(num.df)
colnames(num.df)
num.df %>% ggplot(aes(x =age,y = weight, color = as.factor(fracture.num))) +
geom_point()+geom_density_2d()
num.df %>% ggplot(aes(x = age, y = height, color = as.factor(fracture.num)))+
geom_point() + geom_density_2d()
num.df %>% ggplot(aes(x = age, y = bmi, color = as.factor(fracture.num)))+
geom_point() + geom_density_2d()
num.df %>% ggplot(aes(x = age, y = fracscore, color = as.factor(fracture.num)))+
geom_point() + geom_density_2d()
num.df %>% ggplot(aes(x = weight, y = height, color = as.factor(fracture.num)))+
geom_point() + geom_density_2d()
num.df %>% ggplot(aes(x = bmi, y = height, color = as.factor(fracture.num)))+
geom_point() + geom_density_2d()
num.df %>% ggplot(aes(x = fracscore, y = height, color = as.factor(fracture.num)))+
geom_point() + geom_density_2d()
num.df %>% ggplot(aes(x = bmi, y = weight, color = as.factor(fracture.num)))+
geom_point() + geom_density_2d()
num.df %>% ggplot(aes(x = bmi, y = fracscore, color = as.factor(fracture.num)))+
geom_point() + geom_density_2d()
fitControl <- trainControl(method="repeatedcv",
number=5,
repeats=1,
classProbs=TRUE,
summaryFunction=mnLogLoss)
set.seed(12)
qda.fit <- train(fracture~age+weight+height+bmi+fracscore,
data = training,
method = "qda",
trControl = fitControl,
metric = "logLoss")
predictions <- predict(qda.fit, test, type = "prob")[,"Yes"]
threshold = .258
class_pred = as.factor(ifelse(predictions > threshold, "Yes","No"))
(cm7<-confusionMatrix(data = class_pred, reference = test$fracture, positive = "Yes"))
qda.roc <- roc(response = test$fracture, predictor = predictions, levels = c("Yes","No"))
plot(qda.roc, print.thres = "best", col = "lightblue")
cat("\nSensitivity:", cm7$byClass[1],
"\nSpecificity:", cm7$byClass[2],
"\nPrevalence:", cm7$byClass[8],
"\nPositive Predicitve Value:", cm7$byClass[3],
"\nNegative Predicive Value:",cm7$byClass[4],
"\nAUROC:", qda.roc$auc)
#
# cat ("\nBase Additive Model PPV:","\n", cm1$byClass[3],"\n",
#      "\nReduced Additive Model PPV:","\n", cm2$byClass[3],"\n",
#      "\nComplex Model PPV:","\n", cm3$byClass[3],"\n",
#      "\nGLMNET Model PPV:","\n", cm4$byClass[3],"\n",
#      "\nComplex GLM Model PPV:","\n", cm5$byClass[3],"\n",
#      "\nKNN Model PPV:","\n", cm6$byClass[3],"\n",
#      "\nQDA Model PPV:","\n", cm7$byClass[3])
