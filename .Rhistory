# predicting probabilities on the testing data
simple.predprobs <- predict(simple,test, type = 'response')
#simple.predprobs
simple.roc <- roc(response = test$fracture,
predictor = simple.predprobs,
levels = c("No","Yes"))
plot(simple.roc, print.thres= "best", col = "red")
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
add.model <- train(fracture~ priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(add.model)
# make preds on the probabilty of each class in TRANING data
add.model.predprob <- predict(add.model,test, type = "prob")
# compute the ROC curve
add.model.roc <- roc(response = test$fracture, predictor = add.model.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(add.model.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'caret model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
# get coord (threshold)
coords <- coords(add.model.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.2472446
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(add.model.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
confusionMatrix(pred_label, test$fracture)
# age | bmi.cat - potential interaction ?
df %>% ggplot(aes(x = age, y = fracture.num, color = bmi.cat)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bmi.cat)
# height | bmi.cat - potential interaction ?
df %>% ggplot(aes(x = height, y = fracture.num, color = bmi.cat)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bmi.cat)
# bmi | fracscore - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = armassist)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~armassist)
# bmi | fracscore - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = fracscore)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~fracscore)
# bmi | priorfrac - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = priorfrac )) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~priorfrac)
# height | raterisk - potential interaction ?
df %>% ggplot(aes(x = height, y = fracture.num, color = raterisk)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~raterisk)
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bonemed)
# height | bonemed_fu - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed_fu)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bonemed_fu)
# height | bonetreat - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonetreat)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bonetreat)
complex1 <- glm(fracture ~ bonemed + bonetreat + bonemed_fu + bmi + bmi:bonemed + bmi:bonetreat + bmi:bonemed_fu,
data = training,
family = "binomial")
vif(complex1)
AIC(complex1)
summary(complex1)
# printing out all AIC metrics (note they are based on training data not test data)
cat("Simple:", simple.AIC,
"\nComplex1:", AIC(complex1),
"\nRed Model:", red.aic)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
bonemed_fu:age+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
vif(complex2)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
bonemed_fu:age+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
vif(complex2)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
vif(complex2)
# training CARET mult. logi. regression model
testerer <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
bonemed_fu:age+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
vif(testerer)
vif(testerer)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
bonemed_fu:age+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex2)
complex2 <- glm(fracture~priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
bonemed_fu:age+
momfrac:priorfrac,
data = training, family = "binomial")
vif(complex2)
AIC(complex2)
summary(complex2)
complex2.aic<- AIC(complex2)
# printing out all AIC metrics (note they are based on training data not test data)
cat("Simple:", simple.AIC,
"\nComplex1:", AIC(complex1),
"\nRed Model:", red.aic,
"\nComplex2:", complex2.aic)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
bonemed_fu:age+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex2)
complex2 <- glm(fracture~priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
bonemed_fu:age+
momfrac:priorfrac,
data = training, family = "binomial")
complex2.aic<- AIC(complex2)
# printing out all AIC metrics (note they are based on training data not test data)
cat("Simple:", simple.AIC,
"\nComplex1:", AIC(complex1),
"\nRed Model:", red.aic,
"\nComplex2:", complex2.aic)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex2)
complex2 <- glm(fracture~priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
momfrac:priorfrac,
data = training, family = "binomial")
complex2.aic<- AIC(complex2)
# printing out all AIC metrics (note they are based on training data not test data)
cat("Simple:", simple.AIC,
"\nComplex1:", AIC(complex1),
"\nRed Model:", red.aic,
"\nComplex2:", complex2.aic)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex2)
complex2 <- glm(fracture~priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
momfrac:priorfrac,
data = training, family = "binomial")
# make preds on the probabilty of each class in TRANING data
complex2.predprob <- predict(complex2,training, type = "prob")
u
complex2 <- glm(fracture~priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
momfrac:priorfrac,
data = training, family = "binomial")
# make preds on the probabilty of each class in TRANING data
complex2.predprob <- predict(complex2,training, type = "prob")
# make preds on the probabilty of each class in TRANING data
complex2.predprob <- predict(complex2,test, type = "prob")
# compute the ROC curve
complex2.roc <- roc(response = training$fracture, predictor = complex2.predprob$Yes, levels = c("Yes","No"))
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
add.model <- train(fracture~ priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(add.model)
# make preds on the probabilty of each class in TRANING data
add.model.predprob <- predict(add.model,test, type = "prob")
# make preds on the probabilty of each class in TRANING data
complex2.predprob <- predict(complex2,training, type = "prob")
# make preds on the probabilty of each class in TRANING data
complex2.predprob <- predict(complex2, training, type = "prob")
# make preds on the probabilty of each class in TRANING data
complex2.predprob <- predict(complex2, training, type = "response")
# compute the ROC curve
complex2.roc <- roc(response = training$fracture, predictor = complex2.predprob$Yes, levels = c("Yes","No"))
# compute the ROC curve
complex2.roc <- roc(response = training$fracture, predictor = complex2.predprob$Yes , levels = c("Yes","No"))
# compute the ROC curve
complex2.roc <- roc(response = training$fracture, predictor = complex2.predprob, levels = c("Yes","No"))
# plot ROC curve
plot(complex2.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex2)
complex2 <- glm(fracture~priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
momfrac:priorfrac,
data = training, family = "binomial")
# make preds on the probabilty of each class in TRANING data
complex2.predprob <- predict(complex2, training, type = "response")
# compute the ROC curve
complex2.roc <- roc(response = training$fracture, predictor = complex2.predprob, levels = c("Yes","No"))
# plot ROC curve
plot(complex2.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'caret model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
complex2.aic<- AIC(complex2)
# printing out all AIC metrics (note they are based on training data not test data)
cat("Simple:", simple.AIC,
"\nComplex1:", AIC(complex1),
"\nRed Model:", red.aic,
"\nComplex2:", complex2.aic)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex2)
complex2 <- glm(fracture~priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
momfrac:priorfrac,
data = training, family = "binomial")
# make preds on the probabilty of each class in TRANING data
complex2.predprob <- predict(complex2, training, type = "response")
# compute the ROC curve
complex2.roc <- roc(response = training$fracture, predictor = complex2.predprob, levels = c("Yes","No"))
# plot ROC curve
plot(complex2.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'caret model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
complex2.aic<- AIC(complex2)
# printing out all AIC metrics (note they are based on training data not test data)
cat("Simple:", simple.AIC,
"\nComplex1:", AIC(complex1),
"\nRed Model:", red.aic,
"\nComplex2:", complex2.aic)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex2)
complex2 <- glm(fracture~priorfrac+momfrac+age+bonetreat+bonemed_fu+
momfrac:priorfrac,
data = training, family = "binomial")
# make preds on the probabilty of each class in TRANING data
complex2.predprob <- predict(complex2, training, type = "response")
# compute the ROC curve
complex2.roc <- roc(response = training$fracture, predictor = complex2.predprob, levels = c("Yes","No"))
# plot ROC curve
plot(complex2.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'caret model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
complex2.aic<- AIC(complex2)
# printing out all AIC metrics (note they are based on training data not test data)
cat("Simple:", simple.AIC,
"\nComplex1:", AIC(complex1),
"\nRed Model:", red.aic,
"\nComplex2:", complex2.aic)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex2)
complex2 <- glm(fracture~priorfrac+momfrac+age+bonetreat+bonemed_fu+bmi+
momfrac:priorfrac,
data = training, family = "binomial")
# make preds on the probabilty of each class in TRANING data
complex2.predprob <- predict(complex2, training, type = "response")
# compute the ROC curve
complex2.roc <- roc(response = training$fracture, predictor = complex2.predprob, levels = c("Yes","No"))
# plot ROC curve
plot(complex2.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'caret model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
complex2.aic<- AIC(complex2)
# printing out all AIC metrics (note they are based on training data not test data)
cat("Simple:", simple.AIC,
"\nComplex1:", AIC(complex1),
"\nRed Model:", red.aic,
"\nComplex2:", complex2.aic)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex2 <- train(fracture ~ priorfrac+momfrac+age+bonetreat+bonemed_fu+
momfrac:priorfrac,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex2)
complex2 <- glm(fracture~priorfrac+momfrac+age+bonetreat+bonemed_fu+
momfrac:priorfrac,
data = training, family = "binomial")
# make preds on the probabilty of each class in TRANING data
complex2.predprob <- predict(complex2, training, type = "response")
# compute the ROC curve
complex2.roc <- roc(response = training$fracture, predictor = complex2.predprob, levels = c("Yes","No"))
# plot ROC curve
plot(complex2.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'caret model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
complex2.aic<- AIC(complex2)
# printing out all AIC metrics (note they are based on training data not test data)
cat("Simple:", simple.AIC,
"\nComplex1:", AIC(complex1),
"\nRed Model:", red.aic,
"\nComplex2:", complex2.aic)
summary(complex2)
set.seed(12)
fitControl<- trainControl(method = "repeatedcv", number = 5, repeats = 1)
glm.fit <- train(fracture ~ .,
data = training,
method = "glmnet",
trControl = fitControl)
glm.fit
plot(glm.fit)
opt.pen<- glm.fit$finalModel$lambdaOpt
coef(glm.fit$finalModel, opt.pen)
glm.fit <- train(fracture ~ .-c(1,2,3),
data = training,
method = "glmnet",
trControl = fitControl)
glm.fit <- train(fracture ~ .,
data = training,
method = "glmnet",
trControl = fitControl)
glm.fit
plot(glm.fit)
opt.pen<- glm.fit$finalModel$lambdaOpt
coef(glm.fit$finalModel, opt.pen)
set.seed(12)
fitControl<- trainControl(method = "repeatedcv", number = 5, repeats = 1)
lambda_values <- seq(0,1,by = .1)
glm.fit <- train(fracture ~ .,
data = training,
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(data.frame(alpha = 1, lambda = lambda)))
glm.fit <- train(fracture ~ .,
data = training,
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(data.frame(alpha = 1, lambda = lambda)))
glm.fit <- train(fracture ~ .,
data = training,
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(data.frame(alpha = 1, lambda = lambda_values)))
set.seed(12)
fitControl<- trainControl(method = "repeatedcv", number = 5, repeats = 1)
lambda_values <- seq(0,1,by = .1)
lasso.fit <- train(fracture ~ .,
data = training,
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(data.frame(alpha = 1, lambda = lambda_values)))
lasso.fit
plot(lasso.fit)
opt.pen<- lasso.fit$finalModel$lambdaOpt
coef(lasso.fit$finalModel, opt.pen)
colnames(df)
set.seed(12)
fitControl<- trainControl(method = "repeatedcv", number = 5, repeats = 1)
lambda_values <- seq(0,1,by = .1)
lasso.fit <- train(fracture ~ .-"fracture.num",
data = training,
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(data.frame(alpha = 1, lambda = lambda_values)))
lasso.fit <- train(fracture ~ .,-"fracture.num",
data = training,
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(data.frame(alpha = 1, lambda = lambda_values)))
lasso.fit <- train(fracture ~ . -fracture.num,
data = training,
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(data.frame(alpha = 1, lambda = lambda_values)))
set.seed(12)
fitControl<- trainControl(method = "repeatedcv", number = 5, repeats = 1)
lambda_values <- seq(0,1,by = .1)
lasso.fit <- train(fracture ~ . -fracture.num,
data = training,
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(data.frame(alpha = 1, lambda = lambda_values)))
lasso.fit
plot(lasso.fit)
opt.pen<- lasso.fit$finalModel$lambdaOpt
coef(lasso.fit$finalModel, opt.pen)
