summary(complex.glm)
# make preds on the probabilty of each class in TRANING data
complex.glm.predprob <- predict(complex.glm, test, type = "prob")
# compute the ROC curve
complex.glm.roc <- roc(response = test$fracture, predictor = complex.glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complexcv.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "blue")
plot(glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "black", add = T)
plot(complex.glm.roc, print.thres = "best", col = "red", add = T)
# add legend to plot
legend("bottomright",
legend = c("Complex","GLM",'GLM Complex'),
col = c("blue","black","red"),
lwd = 4, cex = 1, xpd = T, horiz = F)
coords(complexcv.roc, "best", ret = c("threshold", "specificity", "sens"), transpose = F)
coords(glm.roc, "best", ret = c("threshold","specificity","sens"), transpose = F)
coords(complex.glm.roc, "best", ret = c("threshold","specificity","sens"), transpose=F)
complex.glm <- glm(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,family = "binomial")
# AIC
complex.glm.aic<-AIC(complex.glm)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic,
"\nRed.GLM Model(additive):", red.glm.aic,
"\nComplex.GLM:",complex.glm.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
cm <- confusionMatrix(pred_label, test$fracture)
cat("\nSensitivity:", cm$byClass[1],
"\nSpecificity:", cm$byClass[2],
"\nPrevalence:", cm$byClass[3],
"\nPositive Predicitve Value:", cm$byClass[4],
"\nNegative Predicive Value:",cm$byClass[5],
"\nAUROC:", complex.glm.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex.glm <- train(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex.glm)
# make preds on the probabilty of each class in TRANING data
complex.glm.predprob <- predict(complex.glm, test, type = "prob")
# compute the ROC curve
complex.glm.roc <- roc(response = test$fracture, predictor = complex.glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complexcv.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "blue")
plot(glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "black", add = T)
plot(complex.glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red", add = T)
# add legend to plot
legend("bottomright",
legend = c("Complex","GLM",'GLM Complex'),
col = c("blue","black","red"),
lwd = 4, cex = 1, xpd = T, horiz = F)
coords(complexcv.roc, "best", ret = c("threshold", "specificity", "sens"), transpose = F)
coords(glm.roc, "best", ret = c("threshold","specificity","sens"), transpose = F)
coords(complex.glm.roc, "best",  print.thres.best.method = "closest.topleft", ret = c("threshold","specificity","sens"), transpose=F)
complex.glm <- glm(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,family = "binomial")
# AIC
complex.glm.aic<-AIC(complex.glm)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic,
"\nRed.GLM Model(additive):", red.glm.aic,
"\nComplex.GLM:",complex.glm.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
cm <- confusionMatrix(pred_label, test$fracture)
cat("\nSensitivity:", cm$byClass[1],
"\nSpecificity:", cm$byClass[2],
"\nPrevalence:", cm$byClass[3],
"\nPositive Predicitve Value:", cm$byClass[4],
"\nNegative Predicive Value:",cm$byClass[5],
"\nAUROC:", complex.glm.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex.glm <- train(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex.glm)
# make preds on the probabilty of each class in TRANING data
complex.glm.predprob <- predict(complex.glm, test, type = "prob")
# compute the ROC curve
complex.glm.roc <- roc(response = test$fracture, predictor = complex.glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complexcv.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "blue")
plot(glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "black", add = T)
plot(complex.glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red", add = T)
# add legend to plot
legend("bottomright",
legend = c("Complex","GLM",'GLM Complex'),
col = c("blue","black","red"),
lwd = 4, cex = 1, xpd = T, horiz = F)
coords(complexcv.roc, "best", ret = c("threshold", "specificity", "sens"), transpose = F)
coords(glm.roc, "best", ret = c("threshold","specificity","sens"), transpose = F)
coords(complex.glm.roc, "best", ret = c("threshold","specificity","sens"), transpose=F)
complex.glm <- glm(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,family = "binomial")
# AIC
complex.glm.aic<-AIC(complex.glm)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic,
"\nRed.GLM Model(additive):", red.glm.aic,
"\nComplex.GLM:",complex.glm.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
cm <- confusionMatrix(pred_label, test$fracture)
cat("\nSensitivity:", cm$byClass[1],
"\nSpecificity:", cm$byClass[2],
"\nPrevalence:", cm$byClass[3],
"\nPositive Predicitve Value:", cm$byClass[4],
"\nNegative Predicive Value:",cm$byClass[5],
"\nAUROC:", complex.glm.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex.glm <- train(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex.glm)
# make preds on the probabilty of each class in TRANING data
complex.glm.predprob <- predict(complex.glm, test, type = "prob")
# compute the ROC curve
complex.glm.roc <- roc(response = test$fracture, predictor = complex.glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complexcv.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "blue")
plot(glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "black", add = T)
plot(complex.glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red", add = T)
# add legend to plot
legend("bottomright",
legend = c("Complex","GLM Additive",'GLM Complex'),
col = c("blue","black","red"),
lwd = 4, cex = 1, xpd = T, horiz = F)
coords(complexcv.roc, "best", ret = c("threshold", "specificity", "sens"), transpose = F)
coords(glm.roc, "best", ret = c("threshold","specificity","sens"), transpose = F)
coords(complex.glm.roc, "best", ret = c("threshold","specificity","sens"), transpose=F)
complex.glm <- glm(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,family = "binomial")
# AIC
complex.glm.aic<-AIC(complex.glm)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic,
"\nRed.GLM Model(additive):", red.glm.aic,
"\nComplex.GLM:",complex.glm.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
cm <- confusionMatrix(pred_label, test$fracture)
cat("\nSensitivity:", cm$byClass[1],
"\nSpecificity:", cm$byClass[2],
"\nPrevalence:", cm$byClass[3],
"\nPositive Predicitve Value:", cm$byClass[4],
"\nNegative Predicive Value:",cm$byClass[5],
"\nAUROC:", complex.glm.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex.glm <- train(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex.glm)
# make preds on the probabilty of each class in TRANING data
complex.glm.predprob <- predict(complex.glm, test, type = "prob")
# compute the ROC curve
complex.glm.roc <- roc(response = test$fracture, predictor = complex.glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complexcv.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "blue")
plot(glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "black", add = T)
plot(complex.glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red", add = T)
plot(knn.roc,print.thres = "best", print.thres.best.method = "closest.topleft", col = "red", add = T)
# add legend to plot
legend("bottomright",
legend = c("Complex","GLM Additive",'GLM Complex'),
col = c("blue","black","red"),
lwd = 4, cex = 1, xpd = T, horiz = F)
coords(complexcv.roc, "best", ret = c("threshold", "specificity", "sens"), transpose = F)
coords(glm.roc, "best", ret = c("threshold","specificity","sens"), transpose = F)
coords(complex.glm.roc, "best", ret = c("threshold","specificity","sens"), transpose=F)
complex.glm <- glm(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,family = "binomial")
# AIC
complex.glm.aic<-AIC(complex.glm)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic,
"\nRed.GLM Model(additive):", red.glm.aic,
"\nComplex.GLM:",complex.glm.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
cm <- confusionMatrix(pred_label, test$fracture)
cat("\nSensitivity:", cm$byClass[1],
"\nSpecificity:", cm$byClass[2],
"\nPrevalence:", cm$byClass[3],
"\nPositive Predicitve Value:", cm$byClass[4],
"\nNegative Predicive Value:",cm$byClass[5],
"\nAUROC:", complex.glm.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex.glm <- train(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex.glm)
# make preds on the probabilty of each class in TRANING data
complex.glm.predprob <- predict(complex.glm, test, type = "prob")
# compute the ROC curve
complex.glm.roc <- roc(response = test$fracture, predictor = complex.glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complexcv.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "blue")
plot(glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "black", add = T)
plot(complex.glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red", add = T)
plot(knn.roc,print.thres = "best", print.thres.best.method = "closest.topleft", col = "purple", add = T)
# add legend to plot
legend("bottomright",
legend = c("Complex","GLM Additive",'GLM Complex', "KNN"),
col = c("blue","black","purple"),
lwd = 4, cex = 1, xpd = T, horiz = F)
coords(complexcv.roc, "best", ret = c("threshold", "specificity", "sens"), transpose = F)
coords(glm.roc, "best", ret = c("threshold","specificity","sens"), transpose = F)
coords(complex.glm.roc, "best", ret = c("threshold","specificity","sens"), transpose=F)
complex.glm <- glm(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,family = "binomial")
# AIC
complex.glm.aic<-AIC(complex.glm)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic,
"\nRed.GLM Model(additive):", red.glm.aic,
"\nComplex.GLM:",complex.glm.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
cm <- confusionMatrix(pred_label, test$fracture)
cat("\nSensitivity:", cm$byClass[1],
"\nSpecificity:", cm$byClass[2],
"\nPrevalence:", cm$byClass[3],
"\nPositive Predicitve Value:", cm$byClass[4],
"\nNegative Predicive Value:",cm$byClass[5],
"\nAUROC:", complex.glm.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex.glm <- train(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex.glm)
# make preds on the probabilty of each class in TRANING data
complex.glm.predprob <- predict(complex.glm, test, type = "prob")
# compute the ROC curve
complex.glm.roc <- roc(response = test$fracture, predictor = complex.glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complexcv.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "lightblue")
plot(glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "black", add = T)
plot(complex.glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red", add = T)
plot(knn.roc,print.thres = "best", print.thres.best.method = "closest.topleft", col = "purple", add = T)
# add legend to plot
legend("bottomright",
legend = c("Complex","GLM Additive",'GLM Complex', "KNN"),
col = c("lightblue","black","purple"),
lwd = 4, cex = 1, xpd = T, horiz = F)
coords(complexcv.roc, "best", ret = c("threshold", "specificity", "sens"), transpose = F)
coords(glm.roc, "best", ret = c("threshold","specificity","sens"), transpose = F)
coords(complex.glm.roc, "best", ret = c("threshold","specificity","sens"), transpose=F)
complex.glm <- glm(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,family = "binomial")
# AIC
complex.glm.aic<-AIC(complex.glm)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic,
"\nRed.GLM Model(additive):", red.glm.aic,
"\nComplex.GLM:",complex.glm.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
cm <- confusionMatrix(pred_label, test$fracture)
cat("\nSensitivity:", cm$byClass[1],
"\nSpecificity:", cm$byClass[2],
"\nPrevalence:", cm$byClass[3],
"\nPositive Predicitve Value:", cm$byClass[4],
"\nNegative Predicive Value:",cm$byClass[5],
"\nAUROC:", complex.glm.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex.glm <- train(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex.glm)
# make preds on the probabilty of each class in TRANING data
complex.glm.predprob <- predict(complex.glm, test, type = "prob")
# compute the ROC curve
complex.glm.roc <- roc(response = test$fracture, predictor = complex.glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complexcv.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "lightblue")
plot(glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "black", add = T)
plot(complex.glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red", add = T)
plot(knn.roc,print.thres = "best", print.thres.best.method = "closest.topleft", col = "purple", add = T)
# add legend to plot
legend("bottomright",
legend = c("Complex","GLM Additive",'GLM Complex', "KNN"),
col = c("lightblue","black","red","purple"),
lwd = 4, cex = 1, xpd = T, horiz = F)
coords(complexcv.roc, "best", ret = c("threshold", "specificity", "sens"), transpose = F)
coords(glm.roc, "best", ret = c("threshold","specificity","sens"), transpose = F)
coords(complex.glm.roc, "best", ret = c("threshold","specificity","sens"), transpose=F)
complex.glm <- glm(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,family = "binomial")
# AIC
complex.glm.aic<-AIC(complex.glm)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic,
"\nRed.GLM Model(additive):", red.glm.aic,
"\nComplex.GLM:",complex.glm.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
cm <- confusionMatrix(pred_label, test$fracture)
cat("\nSensitivity:", cm$byClass[1],
"\nSpecificity:", cm$byClass[2],
"\nPrevalence:", cm$byClass[3],
"\nPositive Predicitve Value:", cm$byClass[4],
"\nNegative Predicive Value:",cm$byClass[5],
"\nAUROC:", complex.glm.roc$auc)
fitControl <- trainControl(method = "repeatedcv",number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
set.seed(12)
knn.model <- train(fracture~.,
data = training,
trControl = fitControl,
metric = "logLoss")
preds <- predict(knn.model, test, type ="prob")[,"Yes"]
knn.roc <- roc(response = test$fracture, predictor = preds, levels = c("Yes","No"))
plot(knn.roc,print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
threshold = .5
knn.preds <- factor(ifelse(preds > threshold, "Yes","No"))
cm <- confusionMatrix(data = knn.preds, reference = as.factor(test$fracture))
cat("\nSensitivity:", cm$byClass[1],
"\nSpecificity:", cm$byClass[2],
"\nPrevalence:", cm$byClass[3],
"\nPositive Predicitve Value:", cm$byClass[4],
"\nNegative Predicive Value:",cm$byClass[5],
"\nAUROC:",knn.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex.glm <- train(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex.glm)
# make preds on the probabilty of each class in TRANING data
complex.glm.predprob <- predict(complex.glm, test, type = "prob")
# compute the ROC curve
complex.glm.roc <- roc(response = test$fracture, predictor = complex.glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complex.glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'GLM Complex',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
coords(complexcv.roc, "best", ret = c("threshold", "specificity", "sens"), transpose = F)
coords(glm.roc, "best", ret = c("threshold","specificity","sens"), transpose = F)
coords(complex.glm.roc, "best", ret = c("threshold","specificity","sens"), transpose=F)
complex.glm <- glm(fracture ~ priorfrac + momfrac + raterisk + fracscore + bonemed_fu + bmi.cat +
bonemed_fu:bmi.cat,
data = training,family = "binomial")
# AIC
complex.glm.aic<-AIC(complex.glm)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic,
"\nRed.GLM Model(additive):", red.glm.aic,
"\nComplex.GLM:",complex.glm.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
cm <- confusionMatrix(pred_label, test$fracture)
cat("\nSensitivity:", cm$byClass[1],
"\nSpecificity:", cm$byClass[2],
"\nPrevalence:", cm$byClass[3],
"\nPositive Predicitve Value:", cm$byClass[4],
"\nNegative Predicive Value:",cm$byClass[5],
"\nAUROC:", complex.glm.roc$auc)
