optimal.threshold <- coords(lasso.model.roc, "best")
# plot ROC curve
plot(lasso.model.roc, print.thres = "best",col = "red")
# add legend to plot
legend("bottomright",
legend = 'Additive model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
text(x = optimal.threshold[1], y = optimal.threshold[2],
labels = paste("Optimal Threshold =", round(optimal.threshold[1], 2)),
pos = 3)
# get coord (threshold)
coords <- coords(lasso.model.roc, "best",
#best.method = "closest.topleft",
ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.3003923
# make changes to threshold if desired
adj.threshold <- threshold + .4 # lower increases sensitivity
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(lasso.model.predprob$Yes > adj.threshold, "Yes","No"))
# print confusion matrix
(cm2 <- confusionMatrix(pred_label, test$fracture, positive = "Yes"))
cat("LASSO Model",
"\nSensitivity:", cm2$byClass[1],
"\nSpecificity:", cm2$byClass[2],
"\nPrevalence:", cm2$byClass[8],
"\nPositive Predicitve Value:", cm2$byClass[3],
"\nNegative Predicive Value:",cm2$byClass[4],
"\nAUROC:", lasso.model.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
base.adjust.cv <- train(fracture~age+priorfrac+height+momfrac+bonemed+bmi+bonemed_fu,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(base.adjust.cv)
base.adj <- glm(fracture~age + priorfrac+height+momfrac+bonemed+bmi+bonemed_fu,
data = training,
family = "binomial")
AIC(base.adj)
base.aic <- AIC(base.adj) # 384.7314
# make preds on the probabilty of each class in TRANING data
add.model.predprob <- predict(base.adjust.cv,test, type = "prob")
# compute the ROC curve
add.model.roc <- roc(response = test$fracture, predictor = add.model.predprob$Yes, levels = c("Yes","No"))
# optimal threshold
optimal.threshold <- coords(add.model.roc, "best")
# plot ROC curve
plot(add.model.roc, print.thres = "best",col = "red")
# add legend to plot
legend("bottomright",
legend = 'Additive model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
text(x = optimal.threshold[1], y = optimal.threshold[2],
labels = paste("Optimal Threshold =", round(optimal.threshold[1], 2)),
pos = 3)
# get coord (threshold)
coords <- coords(add.model.roc, "best",
#best.method = "closest.topleft",
ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.3003923
# make changes to threshold if desired
adj.threshold <- threshold + 0
# low incr. ses.
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(add.model.predprob$Yes > adj.threshold, "Yes","No"))
# print confusion matrix
(cm3 <- confusionMatrix(pred_label, test$fracture, positive = "Yes"))
cat("SME Model",
"\nSensitivity:", cm3$byClass[1],
"\nSpecificity:", cm3$byClass[2],
"\nPrevalence:", cm3$byClass[8],
"\nPositive Predicitve Value:", cm3$byClass[3],
"\nNegative Predicive Value:",cm3$byClass[4],
"\nAUROC:", add.model.roc$auc)
cat("GLMNET Model",
"\nSensitivity:", cm1$byClass[1],
"\nSpecificity:", cm1$byClass[2],
"\nPrevalence:", cm1$byClass[8],
"\nPositive Predicitve Value:", cm1$byClass[3],
"\nNegative Predicive Value:",cm1$byClass[4],
"\nAUROC:", glm.roc$auc,"\n")
cat("\nLASSO Model",
"\nSensitivity:", cm2$byClass[1],
"\nSpecificity:", cm2$byClass[2],
"\nPrevalence:", cm2$byClass[8],
"\nPositive Predicitve Value:", cm2$byClass[3],
"\nNegative Predicive Value:",cm2$byClass[4],
"\nAUROC:", add.model.roc$auc,"\n")
cat("\nSME Model",
"\nSensitivity:", cm3$byClass[1],
"\nSpecificity:", cm3$byClass[2],
"\nPrevalence:", cm3$byClass[8],
"\nPositive Predicitve Value:", cm3$byClass[3],
"\nNegative Predicive Value:",cm3$byClass[4],
"\nAUROC:", add.model.roc$auc)
fitControl <- trainControl(method = "repeatedcv",number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
set.seed(12)
knn.model <- train(fracture~.,
method = "knn",
data = adj.training,
trControl = fitControl,
metric = "logLoss")
preds <- predict(knn.model, test, type ="prob")[,"Yes"]
knn.roc <- roc(response = test$fracture, predictor = preds, levels = c("Yes","No"))
plot(knn.roc,print.thres = "best", print.thres.best.method = "closest.topleft", col = "purple")
threshold = .3
knn.preds <- factor(ifelse(preds > threshold, "Yes","No"))
(cm6 <- confusionMatrix(data = knn.preds, reference = as.factor(test$fracture), positive = "Yes"))
cat("\nSensitivity:", cm6$byClass[1],
"\nSpecificity:", cm6$byClass[2],
"\nPrevalence:", cm6$byClass[8],
"\nPositive Predicitve Value:", cm6$byClass[3],
"\nNegative Predicive Value:",cm6$byClass[4],
"\nAUROC:", knn.roc$auc)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
complex.cv <- train(fracture~age+priorfrac+height+momfrac+bonemed+bmi+bonemed_fu+height:bonemed_fu+bonemed:bmi,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(complex.cv)
# make preds on the probabilty of each class in TRANING data
complexcv.predprob <- predict(complex.cv, test, type = "prob")
# compute the ROC curve
complexcv.roc <- roc(response = test$fracture, predictor = complexcv.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(complexcv.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
# add legend to plot
legend("bottomright",
legend = 'complex model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
# printing out all AIC metrics (note they are based on training data not test data)
# cat("\nbase.adj Model (Additive):", base.aic,
#     "\nRed Model (Additive):", red.aic,
#     "\nComplex Model:", complex.aic)
# get coord (threshold)
coords <- coords(complexcv.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(complexcv.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
(cm3 <-confusionMatrix(pred_label, test$fracture, positive = "Yes"))
cat("\nSensitivity:", cm3$byClass[1],
"\nSpecificity:", cm3$byClass[2],
"\nPrevalence:", cm3$byClass[8],
"\nPositive Predicitve Value:", cm3$byClass[3],
"\nNegative Predicive Value:",cm3$byClass[4],
"\nAUROC:", complexcv.roc$auc)
library(pROC)
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
red.glm <- train(fracture~site_id+priorfrac+momfrac+raterisk+fracscore+bonemed_fu+bmi.cat+ bonemed_fu:bmi.cat,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(red.glm)
# make preds on the probabilty of each class in TRANING data
glm.predprob <- predict(red.glm, test, type = "prob")
# compute the ROC curve
glm.roc <- roc(response = test$fracture, predictor = glm.predprob$Yes, levels = c("Yes","No"))
# plot ROC curve
plot(glm.roc, print.thres = "best", print.thres.best.method = "closest.topleft", col = "red")
legend("bottomright",# add legend to plot
legend = 'caret model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
# fitting model for AIC below
red.glm <- glm(fracture~site_id+priorfrac+momfrac+raterisk+fracscore+bonemed_fu+bmi.cat,
data = training,family = "binomial")
red.glm.aic<-AIC(red.glm)
red.glm.aic
# get coord (threshold)
coords <- coords(glm.roc, "best", best.method = "closest.topleft", ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.25653
# make changes to threshold if desired
adj.threshold <- threshold + 0
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(glm.predprob$Yes >= adj.threshold, "Yes","No"))
# print confusion matrix
(cm1 <- confusionMatrix(pred_label, test$fracture, positive = "Yes"))
cat("GLMNET Model",
"\nSensitivity:", cm1$byClass[1],
"\nSpecificity:", cm1$byClass[2],
"\nPrevalence:", cm1$byClass[8],
"\nPositive Predicitve Value:", cm1$byClass[3],
"\nNegative Predicive Value:",cm1$byClass[4],
"\nAUROC:", glm.roc$auc)
fitControl <- trainControl(method="repeatedcv",
number=5,
repeats=1,
classProbs=TRUE,
summaryFunction=mnLogLoss)
set.seed(12)
qda.fit <- train(fracture~age+weight+height+bmi+fracscore,
data = training,
method = "qda",
trControl = fitControl,
metric = "logLoss")
predictions <- predict(qda.fit, test, type = "prob")[,"Yes"]
threshold = .5
class_pred = as.factor(ifelse(predictions > threshold, "Yes","No"))
(cm7<-confusionMatrix(data = class_pred, reference = test$fracture, positive = "Yes"))
qda.roc <- roc(response = test$fracture, predictor = predictions, levels = c("Yes","No"))
plot(qda.roc, print.thres = "best", col = "lightblue")
# plot ROC curve
plot(add.model.roc, print.thres = "best",col = "red") # additive
plot(glm.roc, print.thres = "best", col = "purple", add = T) # glm complex
# plot(lasso.model.roc, print.thres = "best",col = "blue", add = T) # lasso
#plot(complexcv.roc, print.thres = "best", col = "purple", add = T) # Complex (interaction)
plot(knn.roc,print.thres = "best", col = "orange", add = T)
plot(qda.roc, print.thres = "best", col = "lightblue", add= T)
# add legend to plot
legend("bottomright",
legend = c('Additive model', "Complex", "KNN", "QDA"),
col = c("red", "purple", "orange", "lightblue"),
lwd = 4, cex = 1, xpd = T, horiz = F)
cat ("\nAdditive Model PPV:","\n", cm3$byClass[3],"\n",
"\nComplex Model PPV:","\n", cm1$byClass[3],"\n",
"\nKNN Model:","\n", cm6$byClass[3],"\n",
"\nQDA Model PPV:","\n", cm7$byClass[3])
cat ("\nAUROC:", add.model.roc$auc,"\n",
"\nAUROC:", red.glm.aic,"\n",
"\nAUROC:", knn.roc$auc,"\n",
"\nAUROC:", qda.roc$auc)
cat ("\nAUROC:", base.aic,"\n",
"\nAUROC:", glm.roc$auc,"\n",
"\nAUROC:", knn.roc$auc,"\n",
"\nAUROC:", qda.roc$auc)
knn.model
fitControl <- trainControl(method = "repeatedcv",number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
set.seed(12)
knn.model <- train(fracture~.,
method = "knn",
data = adj.training,
trControl = fitControl,
metric = "aic")
knn.model
preds <- predict(knn.model, test, type ="prob")[,"Yes"]
knn.roc <- roc(response = test$fracture, predictor = preds, levels = c("Yes","No"))
plot(knn.roc,print.thres = "best", print.thres.best.method = "closest.topleft", col = "purple")
threshold = .3
knn.preds <- factor(ifelse(preds > threshold, "Yes","No"))
(cm6 <- confusionMatrix(data = knn.preds, reference = as.factor(test$fracture), positive = "Yes"))
cat("\nSensitivity:", cm6$byClass[1],
"\nSpecificity:", cm6$byClass[2],
"\nPrevalence:", cm6$byClass[8],
"\nPositive Predicitve Value:", cm6$byClass[3],
"\nNegative Predicive Value:",cm6$byClass[4],
"\nAUROC:", knn.roc$auc)
fitControl <- trainControl(method = "repeatedcv",number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
set.seed(12)
knn.model <- train(fracture~.,
method = "knn",
data = adj.training,
trControl = fitControl,
metric = "AIC")
knn.model
preds <- predict(knn.model, test, type ="prob")[,"Yes"]
knn.roc <- roc(response = test$fracture, predictor = preds, levels = c("Yes","No"))
plot(knn.roc,print.thres = "best", print.thres.best.method = "closest.topleft", col = "purple")
threshold = .3
knn.preds <- factor(ifelse(preds > threshold, "Yes","No"))
(cm6 <- confusionMatrix(data = knn.preds, reference = as.factor(test$fracture), positive = "Yes"))
cat("\nSensitivity:", cm6$byClass[1],
"\nSpecificity:", cm6$byClass[2],
"\nPrevalence:", cm6$byClass[8],
"\nPositive Predicitve Value:", cm6$byClass[3],
"\nNegative Predicive Value:",cm6$byClass[4],
"\nAUROC:", knn.roc$auc)
knn.model
# effect plot
plot_model(red.model, type = "pred", terms = "priorfrac")
library(sjPlot)
library(sjmisc)
library(effects)
# effect plot
plot_model(base.adj, type = "pred", terms = "priorfrac")
plot_model(base.adj, type = "pred",terms = "age")
# identifies all of the high-order terms in a model and returns a list of "eff" or "effpoly" objects.
all.effects <- allEffects(base.adj)
# plots the effect plosts
plot(all.effects,multiline=T)
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bonemed)
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1) +
ylim(-.2, 1.2) + facet_wrap(~bonemed)
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, show.legend = F) +
ylim(-.2, 1.2) + facet_wrap(~bonemed)
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, show.legend = F, span = 1) +
ylim(-.2, 1.2) + facet_wrap(~bonemed)
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, show.legend = F, span = 1) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + xlab("Fracture")
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, show.legend = F, span = 1) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture")
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, show.legend = F, span = 1) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Height in CM")
df %>% ggplot(aes(x = age, y = fracture.num, color = as.factor(fracscore))) +
geom_smooth(method = "loess", size = 1, span= .75) +
ylim(-.2,1.2) + facet_wrap(~as.factor(fracscore))
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bonemed)
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, show.legend = F, span = 1) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Height in CM")
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bonemed)
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = F) +
ylim(-.2, 1.2) + facet_wrap(~bonemed)
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = F) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Body Mass Index")
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = F) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Body Mass Index")
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = F) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Body Mass Index")
# height | bmi.cat
df %>% ggplot(aes(x = height, y = fracture.num, color = bmi.cat)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~bmi.cat)
# bmi | fracscore
df %>% ggplot(aes(x = bmi, y = fracture.num, color = fracscore)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~fracscore)
# bmi | fracscore
df %>% ggplot(aes(x = bmi, y = fracture.num, color = fracscore)) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~fracscore)
# bmi | priorfrac
df %>% ggplot(aes(x = bmi, y = fracture.num, color = priorfrac )) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~priorfrac)
# bmi | priorfrac
df %>% ggplot(aes(x = bmi, y = fracture.num, color = priorfrac )) +
geom_point()+
geom_smooth(method = "loess", size = 1, span = .75) +
ylim(-.2, 1.2) + facet_wrap(~priorfrac)
# bmi | priorfrac
df %>% ggplot(aes(x = bmi, y = fracture.num, color = priorfrac )) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = F) +
ylim(-.2, 1.2) + facet_wrap(~priorfrac)
complex <- glm(fracture~age+priorfrac+height+momfrac+bonemed+bmi+bonemed_fu+
height:bonemed_fu+bonemed:bmi + bmi:priorfrac,
data = training,
family = "binomial")
complex.aic <- AIC(complex)
summary(complex)
# printing out all AIC metrics (note they are based on training data not test data)
cat("\nbase.adj Model (Additive):", base.aic,
"\nRed Model (Additive):", red.aic,
"\nComplex Model:", complex.aic)
# bmi | priorfrac
df %>% ggplot(aes(x = bmi, y = fracture.num, color = priorfrac )) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = F) +
ylim(-.2, 1.2) + facet_wrap(~priorfrac)+ ylab("Fracture") + xlab("Body Mass Index")
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = T) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Body Mass Index")
# bmi | priorfrac
df %>% ggplot(aes(x = bmi, y = fracture.num, color = priorfrac )) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = T) +
ylim(-.2, 1.2) + facet_wrap(~priorfrac)+ ylab("Fracture") + xlab("Body Mass Index")
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, show.legend = T, span = 1) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Height in CM")
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, show.legend = T, span = 1) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Height in CM")
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = T) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Body Mass Index")
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = T) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Body Mass Index")
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, show.legend = T, span = 1) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Height in CM")
# bmi | priorfrac
df %>% ggplot(aes(x = bmi, y = fracture.num, color = priorfrac )) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = T) +
ylim(-.2, 1.2) + facet_wrap(~priorfrac)+ ylab("Fracture") + xlab("Body Mass Index")
df %>% ggplot(aes(x = height, y = fracture.num, color = as.factor(bonemed)))+
geom_smooth(method = "loess", size = 1, show.legend = T, span = 1) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Height in CM")
# height | bonemed - potential interaction ?
df %>% ggplot(aes(x = bmi, y = fracture.num, color = bonemed)) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = T) +
ylim(-.2, 1.2) + facet_wrap(~bonemed) + ylab("Fracture") + xlab("Body Mass Index")
# bmi | priorfrac
df %>% ggplot(aes(x = bmi, y = fracture.num, color = priorfrac )) +
geom_point(show.legend = F)+
geom_smooth(method = "loess", size = 1, span = 1, show.legend = T) +
ylim(-.2, 1.2) + facet_wrap(~priorfrac)+ ylab("Fracture") + xlab("Body Mass Index")
# parameters for train function
fitControl <- trainControl( method = "repeatedcv", number = 5, repeats = 1, classProbs = T, summaryFunction = mnLogLoss)
# set seed for reproduceability
set.seed(12)
# training CARET mult. logi. regression model
base.adjust.cv <- train(fracture~age+priorfrac+height+momfrac+bonemed+bmi+bonemed_fu,
data = training,
trControl = fitControl,
method = "glm",
family = "binomial",
metric = "logLoss")
summary(base.adjust.cv)
base.adj <- glm(fracture~age + priorfrac+height+momfrac+bonemed+bmi+bonemed_fu,
data = training,
family = "binomial")
AIC(base.adj)
base.aic <- AIC(base.adj) # 384.7314
# make preds on the probabilty of each class in TRANING data
add.model.predprob <- predict(base.adjust.cv,test, type = "prob")
# compute the ROC curve
add.model.roc <- roc(response = test$fracture, predictor = add.model.predprob$Yes, levels = c("Yes","No"))
# optimal threshold
optimal.threshold <- coords(add.model.roc, "best")
# plot ROC curve
plot(add.model.roc, print.thres = "best",col = "red")
# add legend to plot
legend("bottomright",
legend = 'Additive model',
col = "red",
lwd = 4, cex = 1, xpd = T, horiz = F)
text(x = optimal.threshold[1], y = optimal.threshold[2],
labels = paste("Optimal Threshold =", round(optimal.threshold[1], 2)),
pos = 3)
# get coord (threshold)
coords <- coords(add.model.roc, "best",
#best.method = "closest.topleft",
ret = "threshold")
# get optimal threshold
threshold <- coords[[1]] # currently this is 0.3003923
# make changes to threshold if desired
adj.threshold <- threshold + 0
# low incr. ses.
# adjust the labeling by the desired threshold
pred_label <- as.factor(ifelse(add.model.predprob$Yes > adj.threshold, "Yes","No"))
# print confusion matrix
(cm3 <- confusionMatrix(pred_label, test$fracture, positive = "Yes"))
cat("SME Model",
"\nSensitivity:", cm3$byClass[1],
"\nSpecificity:", cm3$byClass[2],
"\nPrevalence:", cm3$byClass[8],
"\nPositive Predicitve Value:", cm3$byClass[3],
"\nNegative Predicive Value:",cm3$byClass[4],
"\nAUROC:", add.model.roc$auc)
cat ("\nAdditive Model PPV:","\n", cm3$byClass[4],"\n",
"\nComplex Model PPV:","\n", cm1$byClass[4],"\n",
"\nKNN Model:","\n", cm6$byClass[4],"\n",
"\nQDA Model PPV:","\n", cm7$byClass[4])
