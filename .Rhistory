trainIndex <- createDataPartition(df$fracture, p= .8, list = F) # p = proportion of data in train
training <- df[trainIndex,]
test <- df[-trainIndex,]
# sanity check
nrow(training)
nrow(test)
library(car)
# fitting an additive multiple logistic regression model
simple <- glm(fracture ~ fracscore + smoke + armassist + momfrac + premeno + bmi.cat + height + age + bonemed + bonetreat, data = training, family ="binomial")
# looking at coefficients
summary(simple)
# looking for Multicollinearity
vif(simple)
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
AIC(simple)
# fitting an additive multiple logistic regression model
simple1 <- glm(fracture ~ smoke + armassist + momfrac + premeno + bmi.cat + height + age + bonemed + bonetreat, data = training, family ="binomial")
# looking at coefficients
summary(simple1)
# looking for Multicollinearity
vif(simple1)
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
AIC(simple1)
# fitting an additive multiple logistic regression model
simple2 <- glm(fracture ~ armassist + momfrac + premeno + bmi.cat + height + age + bonemed + bonetreat, data = training, family ="binomial")
# looking at coefficients
summary(simple2)
# looking for Multicollinearity
vif(simple2)
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
AIC(simple2)
#install.packages('janitor')
#install.packages('aplore3')
library(aplore3) # for our dataset
library(tidyverse) # tools for viz/cleaning/etc
library(janitor) # tools for cleaning
library(visdat) # visualize our missing data
# adding dataset into df call.
df <- glow_bonemed
# looking at our data from afar
#glimpse(df) # alot of categorical vars (factor encoding)
# for a look at a brief data description uncomment lines below:
#?glow_bonemed
#?glow500
# check for duplicated data
# get_dupes(df, sub_id) # no duplicated data here which is what we'd like to see.
# get_dupes(df, site_id) # makes sense that we would have duplicated study sites.
# get_dupes(df, phy_id) # makes sense that we would have duplicated physician id codes.
# check for missing values
vis_miss(df) # great! No missing values.
# visualizing the summary of our data.
summary(df)
library(ggplot2)
library(gridExtra)
c <- df %>% # allows us to gather table of y/n fracture, the cnt, and percent.
group_by(fracture) %>%
summarise(cnt = n()) %>%
mutate(perc=round(cnt/sum(cnt),4))
#c # shows the result of the above
# bar plot visual of the above.
p<- ggplot(c, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture") +
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
c1 <- df %>%
group_by(fracture, premeno) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
#c1
p1<- ggplot(c1[c(2,3),], aes(x = reorder(premeno, -perc), y = perc, colour = premeno))+
geom_bar(aes(fill = premeno), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab('Menopause before age 45')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
c2 <- df %>%
group_by(fracture, momfrac) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c2
p2<- ggplot(c2[c(2,3),], aes(x = reorder(momfrac, -perc), y = perc, color = momfrac)) +
geom_bar(aes(fill = momfrac), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Mother had Hip fracture") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c3 <- df %>%
group_by(fracture, smoke) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c3
p3<- ggplot(c3[c(1,4),], aes(x = reorder(smoke, -perc), y = perc, color = smoke)) +
geom_bar(aes(fill = smoke), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Former/Current Smoker") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 1, size = 5, color = "black")
c4 <- df %>%
group_by(fracture, raterisk) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c4
p4<- ggplot(c4[c(1,2,6),], aes(x = reorder(raterisk, -perc), y = perc, color = raterisk)) +
geom_bar(aes(fill = raterisk), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Self-Risk-Score") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 4, color = "black")
c5 <- df %>%
group_by(fracture, bonemed) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c5
p5<- ggplot(c5[c(2,3),], aes(x = reorder(bonemed, -perc), y = perc, color = bonemed)) +
geom_bar(aes(fill = bonemed), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Medication at Enrollment") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c6 <- df %>%
group_by(fracture, bonemed_fu) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c6
p6<-ggplot(c6[c(2,3),], aes(x = reorder(bonemed_fu, -perc), y = perc, color = bonemed_fu)) +
geom_bar(aes(fill = bonemed_fu), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Medication at Follow-up") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c7 <- df %>%
group_by(fracture, bonetreat) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c7
p7<-ggplot(c7[c(2,3),], aes(x = reorder(bonetreat, -perc), y = perc, color = bonetreat)) +
geom_bar(aes(fill = bonetreat), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Treatment: Enrollment & Follow-up") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c8 <- df %>%
group_by(fracture, armassist) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
#c8
p8<- ggplot(c8[c(2,3),], aes(x = reorder(armassist, -perc), y = perc, colour = armassist))+
geom_bar(aes(fill = armassist), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab('Assistance to Stand')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
c9 <- df %>%
group_by(fracture, priorfrac) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c9
p9<-ggplot(c9[c(2,3),], aes(x = reorder(priorfrac, -perc), y = perc, color = priorfrac)) +
geom_bar(aes(fill = priorfrac), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Prior Fracture") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
# transforming numeric into categorical using widley accepted BMI categories
df$bmi.cat <- ifelse(df$bmi < 18.5, "Underweight",
ifelse(df$bmi < 25, "Healthy weight",
ifelse(df$bmi < 30, "Overweight", "Obesity")))
c10 <- df %>%
group_by(fracture, bmi.cat) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
#c10
p10<- ggplot(c10[c(2,3,5,8),], aes(x = reorder(bmi.cat, -perc), y = perc, colour = bmi.cat))+
geom_bar(aes(fill = bmi.cat), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab('BMI Categories')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 1, size = 4, color = 'black')
grid.arrange(p,p1,p2,p3,p4,
heights = c(1,1))
grid.arrange(p5,p6,p7,p8,p9,p10,
heights= c(1,1),
widths = c(1,1,1.6))
grid.arrange(p,p1,p2,p3,p4,
heights = c(1,1))
grid.arrange(p5,p7,p10,
heights = c(1,1),
widths = c(1,1,1.6))
# numercial form of fracture
df$fracture.num <- ifelse(df$fracture == "Yes",1,0) # Yes = 1 | No = 0
lp <- df %>% ggplot(aes(x = phy_id, y = fracture.num)) +
geom_point() + ggtitle("LOESS: Phy_ID")+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)
lp1<- df %>% ggplot(aes(x = site_id, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Site_id")
lp2<- df %>% ggplot(aes(x = weight, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Weight")
lp3<- df %>% ggplot(aes(x = age, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Age")
lp4<- df %>% ggplot(aes(x = height, y = fracture.num)) +
geom_point()+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Height")
lp5<- df %>% ggplot(aes(x = fracscore, y = fracture.num)) +
geom_point()+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: fracscore")
lp6 <- df %>% ggplot(aes(x = bmi, fracture.num)) +
geom_point()+
geom_smooth(method = 'loess', size = 1) + ylim(-.2,1.2) + ggtitle("Loess: BMI")
grid.arrange(lp,lp1,lp2,lp3,lp4,lp5,lp6,
heights = c(1,1))
library(caret)
set.seed(12)
trainIndex <- createDataPartition(df$fracture, p= .8, list = F) # p = proportion of data in train
training <- df[trainIndex,]
test <- df[-trainIndex,]
# sanity check
nrow(training)
nrow(test)
library(car)
# fitting an additive multiple logistic regression model
simple <- glm(fracture ~ fracscore + smoke + armassist + momfrac + premeno + bmi.cat + height + age + bonemed + bonetreat, data = training, family ="binomial")
# looking at coefficients
summary(simple)
# looking for Multicollinearity
vif(simple)
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
AIC(simple)
# fitting an additive multiple logistic regression model
simple1 <- glm(fracture ~ smoke + armassist + momfrac + premeno + bmi.cat + height + age + bonemed + bonetreat, data = training, family ="binomial")
# looking at coefficients
summary(simple1)
# looking for Multicollinearity
vif(simple1)
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
AIC(simple1)
library(sjPlot)
library(sjmisc)
library(effects)
# effect plot
plot_model(simple, type = "pred", terms = c("age","bonemed"))
plot_model(simple, type = "pred", terms = c("age","bonetreat"))
# effect plot
plot_model(simple,type="pred",terms = c("smoke","momfrac"))
# effect plot
plot_model(simple, type = "pred", terms = c("armassist","age[55,60,65,70,75,80,85,90]"))
library(ResourceSelection)
# Hosmer-Lemeshow test
hoslem.test(simple1$y, fitted(simple1))
# Hosmer-Lemeshow test
hoslem.test(simple$y, fitted(simple))
# fitting an additive multiple logistic regression model
simple1 <- glm(fracture ~ smoke + armassist + momfrac + premeno + height + age + bonemed + bonetreat, data = training, family ="binomial")
# looking at coefficients
summary(simple2)
# looking for Multicollinearity
vif(simple2)
# fitting an additive multiple logistic regression model
simple2 <- glm(fracture ~ smoke + armassist + momfrac + premeno + height + age + bonemed + bonetreat, data = training, family ="binomial")
# looking at coefficients
summary(simple2)
# looking for Multicollinearity
vif(simple2)
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
AIC(simple2)
# Hosmer-Lemeshow test
hoslem.test(simple2$y, fitted(simple2))
coef(simple) # normal coefficient output
#install.packages('janitor')
#install.packages('aplore3')
library(aplore3) # for our dataset
library(tidyverse) # tools for viz/cleaning/etc
library(janitor) # tools for cleaning
library(visdat) # visualize our missing data
# adding dataset into df call.
df <- glow_bonemed
# looking at our data from afar
#glimpse(df) # alot of categorical vars (factor encoding)
# for a look at a brief data description uncomment lines below:
#?glow_bonemed
#?glow500
# check for duplicated data
# get_dupes(df, sub_id) # no duplicated data here which is what we'd like to see.
# get_dupes(df, site_id) # makes sense that we would have duplicated study sites.
# get_dupes(df, phy_id) # makes sense that we would have duplicated physician id codes.
# check for missing values
vis_miss(df) # great! No missing values.
# visualizing the summary of our data.
summary(df)
library(ggplot2)
library(gridExtra)
c <- df %>% # allows us to gather table of y/n fracture, the cnt, and percent.
group_by(fracture) %>%
summarise(cnt = n()) %>%
mutate(perc=round(cnt/sum(cnt),4))
#c # shows the result of the above
# bar plot visual of the above.
p<- ggplot(c, aes(x = fracture, y = perc, colour = fracture)) +
geom_bar(aes(fill = fracture), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') + xlab("Fracture") +
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
c1 <- df %>%
group_by(fracture, premeno) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
#c1
p1<- ggplot(c1[c(2,3),], aes(x = reorder(premeno, -perc), y = perc, colour = premeno))+
geom_bar(aes(fill = premeno), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab('Menopause before age 45')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
c2 <- df %>%
group_by(fracture, momfrac) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c2
p2<- ggplot(c2[c(2,3),], aes(x = reorder(momfrac, -perc), y = perc, color = momfrac)) +
geom_bar(aes(fill = momfrac), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Mother had Hip fracture") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c3 <- df %>%
group_by(fracture, smoke) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c3
p3<- ggplot(c3[c(1,4),], aes(x = reorder(smoke, -perc), y = perc, color = smoke)) +
geom_bar(aes(fill = smoke), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Former/Current Smoker") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 1, size = 5, color = "black")
c4 <- df %>%
group_by(fracture, raterisk) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c4
p4<- ggplot(c4[c(1,2,6),], aes(x = reorder(raterisk, -perc), y = perc, color = raterisk)) +
geom_bar(aes(fill = raterisk), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Self-Risk-Score") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 4, color = "black")
c5 <- df %>%
group_by(fracture, bonemed) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c5
p5<- ggplot(c5[c(2,3),], aes(x = reorder(bonemed, -perc), y = perc, color = bonemed)) +
geom_bar(aes(fill = bonemed), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Medication at Enrollment") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c6 <- df %>%
group_by(fracture, bonemed_fu) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c6
p6<-ggplot(c6[c(2,3),], aes(x = reorder(bonemed_fu, -perc), y = perc, color = bonemed_fu)) +
geom_bar(aes(fill = bonemed_fu), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Medication at Follow-up") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c7 <- df %>%
group_by(fracture, bonetreat) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c7
p7<-ggplot(c7[c(2,3),], aes(x = reorder(bonetreat, -perc), y = perc, color = bonetreat)) +
geom_bar(aes(fill = bonetreat), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Treatment: Enrollment & Follow-up") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
c8 <- df %>%
group_by(fracture, armassist) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
#c8
p8<- ggplot(c8[c(2,3),], aes(x = reorder(armassist, -perc), y = perc, colour = armassist))+
geom_bar(aes(fill = armassist), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab('Assistance to Stand')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 2, size = 5, color = 'black')
c9 <- df %>%
group_by(fracture, priorfrac) %>%
summarise(cnt=n()) %>%
mutate(perc = round(cnt/sum(cnt),4)) %>%
arrange(desc(perc))
#c9
p9<-ggplot(c9[c(2,3),], aes(x = reorder(priorfrac, -perc), y = perc, color = priorfrac)) +
geom_bar(aes(fill = priorfrac), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab("Prior Fracture") +
geom_text(aes(label = paste0(perc * 100, "%")), vjust = 2, size = 5, color = "black")
# transforming numeric into categorical using widley accepted BMI categories
df$bmi.cat <- ifelse(df$bmi < 18.5, "Underweight",
ifelse(df$bmi < 25, "Healthy weight",
ifelse(df$bmi < 30, "Overweight", "Obesity")))
c10 <- df %>%
group_by(fracture, bmi.cat) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))%>%
arrange(desc(perc))
#c10
p10<- ggplot(c10[c(2,3,5,8),], aes(x = reorder(bmi.cat, -perc), y = perc, colour = bmi.cat))+
geom_bar(aes(fill = bmi.cat), show.legend = F, stat = 'identity') +
ylab('Proportion of Fracture') +
xlab('BMI Categories')+
geom_text(aes(label = paste0(perc *100, "%")), vjust = 1, size = 4, color = 'black')
grid.arrange(p,p1,p2,p3,p4,
heights = c(1,1))
grid.arrange(p5,p6,p7,p8,p9,p10,
heights= c(1,1),
widths = c(1,1,1.6))
grid.arrange(p,p1,p2,p3,p4,
heights = c(1,1))
grid.arrange(p5,p7,p10,
heights = c(1,1),
widths = c(1,1,1.6))
# numercial form of fracture
df$fracture.num <- ifelse(df$fracture == "Yes",1,0) # Yes = 1 | No = 0
lp <- df %>% ggplot(aes(x = phy_id, y = fracture.num)) +
geom_point() + ggtitle("LOESS: Phy_ID")+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)
lp1<- df %>% ggplot(aes(x = site_id, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Site_id")
lp2<- df %>% ggplot(aes(x = weight, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Weight")
lp3<- df %>% ggplot(aes(x = age, y = fracture.num)) +
geom_point() +
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Age")
lp4<- df %>% ggplot(aes(x = height, y = fracture.num)) +
geom_point()+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: Height")
lp5<- df %>% ggplot(aes(x = fracscore, y = fracture.num)) +
geom_point()+
geom_smooth(method = "loess", size = 1) + ylim(-.2, 1.2)+ ggtitle("LOESS: fracscore")
lp6 <- df %>% ggplot(aes(x = bmi, fracture.num)) +
geom_point()+
geom_smooth(method = 'loess', size = 1) + ylim(-.2,1.2) + ggtitle("Loess: BMI")
grid.arrange(lp,lp1,lp2,lp3,lp4,lp5,lp6,
heights = c(1,1))
library(caret)
set.seed(12)
trainIndex <- createDataPartition(df$fracture, p= .8, list = F) # p = proportion of data in train
training <- df[trainIndex,]
test <- df[-trainIndex,]
# sanity check
nrow(training)
nrow(test)
library(ResourceSelection)
library(car)
# fitting an additive multiple logistic regression model
simple <- glm(fracture ~ fracscore + smoke + armassist + momfrac + premeno + bmi.cat + height + age + bonemed + bonetreat, data = training, family ="binomial")
# looking at coefficients
summary(simple)
# looking for Multicollinearity
vif(simple)
# AIC metric can help us compare against models with interactions later to determine if the interactions are important or not.
AIC(simple)
# Hosmer-Lemeshow test
hoslem.test(simple$y, fitted(simple))
coef(simple) # normal coefficient output
coef(simple) # normal coefficient output
exp(coef(simple)) # exp coefficient
coef(simple) # normal coefficient output
exp(coef(simple)) # exp coefficient
# confidence intervals
exp(confint(simple, level = .95)) # confidence interval @ .05 significance
# coefficient output for log. reg. model:
coef(simple1) # normal coefficient output
exp(coef(simple1)) # exp coefficient
# confidence intervals
exp(confint(simple1, level = .95)) # confidence interval @ .05 significance
exp(coef(simple1)) # exp coefficient
# confidence intervals
exp(confint(simple1, level = .95)) # confidence interval @ .05 significance
red.model <- glm(fracture~fracscore + smoke + armassist + momfrac + premeno + bmi.cat + height + age + bonemed + bonetreat,
data = training,
family ="binomial")
summary(red.model)
# coefficient output for log. reg. model:
coef(simple1) # normal coefficient output
exp(coef(simple1)) # exp coefficient
# confidence intervals
exp(confint(simple1, level = .95)) # confidence interval @ .05 significance
# coefficient output for log. reg. model:
coef(simple) # normal coefficient output
exp(coef(simple)) # exp coefficient
# confidence intervals
exp(confint(simple, level = .95)) # confidence interval @ .05 significance
red.model <- glm(fracture~fracscore + bmi.cat + bonemed,
data = training,
family ="binomial")
summary(red.model)
library(sjPlot)
library(sjmisc)
library(effects)
# effect plot
plot_model(simple, type = "pred", terms = "fracscore")
plot_model(simple, type = "pred", terms = "bonemed")
plot_model(simple, type = "pred", terms = "bmi.cat")
